from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode

from NIVEAbot.database.db import db
from ..utils.helpers import check_permissions, format_time, get_current_timestamp
from ..config.config import BONUS_COOLDOWN, WORK_COOLDOWN

async def check_cooldown(user_id: int, command: str, cooldown: int) -> tuple[bool, int]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    current_ts = get_current_timestamp()
    
    db.cursor.execute(
        'SELECT last_action_ts FROM last_actions WHERE user_id = ? AND command_name = ?', 
        (user_id, command)
    )
    last_action = db.cursor.fetchone()
    
    if last_action:
        time_since_last = current_ts - last_action[0]
        if time_since_last < cooldown:
            return False, cooldown - time_since_last
    return True, 0

async def cmd_bonus(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –±–æ–Ω—É—Å"""
    user_id = message.from_user.id
    
    can_collect, wait_time = await check_cooldown(user_id, '–±–æ–Ω—É—Å', BONUS_COOLDOWN)
    if not can_collect:
        await message.reply(
            f"–í—ã —É–∂–µ –∑–∞–±—Ä–∞–ª–∏ –±–æ–Ω—É—Å –Ω–µ–¥–∞–≤–Ω–æ. "
            f"<blockquote>–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ {format_time(wait_time)}</blockquote>",
            parse_mode=ParseMode.HTML
        )
        return
    
    bonus_amount = random.randint(600, 2200)
    db.update_balance(user_id, bonus_amount)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    db.cursor.execute(
        'REPLACE INTO last_actions (user_id, command_name, last_action_ts) VALUES (?, ?, ?)',
        (user_id, '–±–æ–Ω—É—Å', get_current_timestamp())
    )
    db.conn.commit()
    
    await message.reply(
        f"–ë–æ–Ω—É—Å –≤ –≤–∏–¥–µ <code>{bonus_amount}</code> <b>yun-coin</b>",
        parse_mode=ParseMode.HTML
    )

async def cmd_work(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–æ—Ä–∫"""
    user_id = message.from_user.id
    
    can_work, wait_time = await check_cooldown(user_id, '–≤–æ—Ä–∫', WORK_COOLDOWN)
    if not can_work:
        await message.reply(
            f"–í—ã —É–∂–µ –±—ã–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ –Ω–µ–¥–∞–≤–Ω–æ. "
            f"<blockquote>–°–ª–µ–¥—É—é—â–∞—è —Ä–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ {format_time(wait_time)}</blockquote>",
            parse_mode=ParseMode.HTML
        )
        return
    
    work_amount = random.randint(350, 1250)
    db.update_balance(user_id, work_amount)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    db.cursor.execute(
        'REPLACE INTO last_actions (user_id, command_name, last_action_ts) VALUES (?, ?, ?)',
        (user_id, '–≤–æ—Ä–∫', get_current_timestamp())
    )
    db.conn.commit()
    
    await message.reply(
        f"–í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ, –∏ –ø–æ–ª—É—á–∏–ª–∏ <code>{work_amount}</code> <b>yun-coin</b>",
        parse_mode=ParseMode.HTML
    )

async def cmd_balance(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –±–∞–ª–∞–Ω—Å"""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_link = f'<a href="tg://user?id={user_id}">{username}</a>'
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.cursor.execute('SELECT * FROM honey WHERE user_id = ?', (user_id,))
    record = db.cursor.fetchone()
    
    if not record:
        db.cursor.execute(
            'INSERT INTO honey (user_id, username, user_link) VALUES (?, ?, ?)',
            (user_id, username, user_link)
        )
        db.conn.commit()
        honey_count = 0
        theme = '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'
    else:
        honey_count = record[1]
        theme = record[5]
    
    if theme == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç':
        text = f"<u>–ö–æ—à–µ–ª–µ–∫</u> {user_link}\n<blockquote>–æ–±—ã—á–Ω—ã–π —Å—á–µ—Ç - <code>{honey_count}</code> <b>yun-coin</b></blockquote>"
    else:
        text = f"–ö–æ—à–µ–ª–µ–∫ {user_link},\n–≤–∞—à —Å—á–µ—Ç - <code>{honey_count}</code> yun-coin ü™ô"
    
    await message.reply(text, parse_mode=ParseMode.HTML)

async def cmd_give(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–¥–∞—Ç—å"""
    user_id = message.from_user.id
    reply_msg = message.reply_to_message
    
    if not reply_msg or reply_msg.from_user.id == user_id:
        await message.reply("<b>–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.</b>", parse_mode=ParseMode.HTML)
        return
    
    try:
        amount = int(message.text.split()[1])
        if amount < 0:
            await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É.")
            return
            
        sender_balance = db.get_user_balance(user_id)
        if sender_balance < amount:
            await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É
        db.update_balance(user_id, -amount)
        db.update_balance(reply_msg.from_user.id, amount)
        
        await message.reply(
            f"{amount} yun-coin –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–æ—à–µ–ª–µ–∫ - {reply_msg.from_user.username}.\n"
            f"<blockquote>–°—á–µ—Ç –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {sender_balance - amount}</blockquote>",
            parse_mode=ParseMode.HTML
        )
        
    except (IndexError, ValueError):
        await message.reply(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. <blockquote>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–æ—Ç–¥–∞—Ç—å <—á–∏—Å–ª–æ>'.</blockquote>",
            parse_mode=ParseMode.HTML
        )

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —ç–∫–æ–Ω–æ–º–∏–∫–∏"""
    dp.register_message_handler(cmd_bonus, Text(equals=['–±–æ–Ω—É—Å']))
    dp.register_message_handler(cmd_work, Text(equals=['–≤–æ—Ä–∫']))
    dp.register_message_handler(cmd_balance, Text(equals=['–ö–æ—à–µ–ª–µ–∫', '–∫–æ—à–µ–ª–µ–∫', '–∫–æ—à–µ–ª—ë–∫', '–ö–æ—à–µ–ª—ë–∫', '—è', '–Ø']))
    dp.register_message_handler(cmd_give, Text(startswith=['–æ—Ç–¥–∞—Ç—å'])) 