import random
from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton

from ..database.db import db
from ..keyboards.keyboards import get_mining_keyboard

async def cmd_mine(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —à–∞—Ö—Ç—ã"""
    if message.chat.type != 'private':
        await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!</b>", parse_mode=ParseMode.HTML)
        return
        
    keyboard = get_mining_keyboard()
    await message.reply(
        "<b>‚õ∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∞—Ö—Ç—É!</b>\n<blockquote>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É.</blockquote>",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

async def mine_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±—ã—á–∏"""
    user_id = callback_query.from_user.id
    stones_found = random.randint(1, 5)
    
    current_stones = db.get_user_stones(user_id)
    db.update_stones(user_id, stones_found)
    
    keyboard = get_mining_keyboard()
    await callback_query.message.edit_text(
        f"<b>‚õ∞ –®–∞—Ö—Ç–∞</b>\n<blockquote>üéâ –í—ã –Ω–∞—à–ª–∏ {stones_found} –∫–∞–º–Ω–µ–π!</blockquote>",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

async def cmd_process(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏"""
    if message.chat.type != 'private':
        await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!</b>", parse_mode=ParseMode.HTML)
        return
        
    user_id = message.from_user.id
    stones = db.get_user_stones(user_id)
    
    if not stones:
        await message.reply("<blockquote>–£ –≤–∞—Å –Ω–µ—Ç –∫–∞–º–Ω–µ–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏!</blockquote>", parse_mode=ParseMode.HTML)
        return
    
    coins = stones * 2  # –ö–∞–∂–¥—ã–π –∫–∞–º–µ–Ω—å –¥–∞—ë—Ç 2 –º–æ–Ω–µ—Ç—ã
    
    # –û–±–Ω—É–ª—è–µ–º –∫–∞–º–Ω–∏
    db.update_stones(user_id, -stones)
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
    db.update_balance(user_id, coins)
    
    await message.reply(
        f"<blockquote>–í—ã –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–ª–∏ {stones} –∫–∞–º–Ω–µ–π –∏ –ø–æ–ª—É—á–∏–ª–∏ {coins} yun-coin!</blockquote>",
        parse_mode=ParseMode.HTML
    )

async def cmd_backpack(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—É–º–∫–∏"""
    if message.chat.type != 'private':
        await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!</b>", parse_mode=ParseMode.HTML)
        return
        
    user_id = message.from_user.id
    stones = db.get_user_stones(user_id)
    
    await message.reply(f"<blockquote>–í –≤–∞—à–µ–π —Å—É–º–∫–µ {stones} –∫–∞–º–Ω–µ–π</blockquote>", parse_mode=ParseMode.HTML)

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞—Ö—Ç—ã"""
    dp.register_message_handler(cmd_mine, Text(equals=['–∑–∞–π—Ç–∏ –≤ —à–∞—Ö—Ç—É', '—à–∞—Ö—Ç–∞', '/—à–∞—Ö—Ç–∞', '!—à–∞—Ö—Ç–∞']))
    dp.register_callback_query_handler(mine_callback, lambda c: c.data == "mine_stones")
    dp.register_message_handler(cmd_process, Text(equals=['–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å', '/–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å', '!–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å']))
    dp.register_message_handler(cmd_backpack, Text(equals=['—Å—É–º–∫–∞', '/—Å—É–º–∫–∞', '!—Å—É–º–∫–∞'])) 