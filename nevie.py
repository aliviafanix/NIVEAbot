import logging
import asyncio
import time
import sqlite3
from datetime import datetime, timedelta
import PIL
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO

import psutil
import re
import random
import os
import traceback
import io
import sys
import string 
import html
import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.types import InputFile, ContentType, Message, ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.types.callback_query import CallbackQuery
from aiogram.utils.callback_data import CallbackData
import sqlite3
import random
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ParseMode
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from random import randint
import time
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.utils.exceptions import MessageToEditNotFound
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.utils.markdown import hbold, hcode
from random import randint
import asyncio
import os
import random
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message
import logging
from aiogram import Bot, Dispatcher, types
import g4f
from aiogram.utils import executor


API_TOKEN = "7234887704:AAH3QGIu_uEK8kRs8gEtkHCmUD-5JX8xeeo"
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

import asyncio
import time
import random
import platform
from aiogram import Bot, Dispatcher, types

start_time = time.time()


@dp.message_handler(lambda message: message.text.lower() == "–ø–∏–Ω–≥")
async def ping_handler(message: types.Message):
    try:
        if platform.system() == "Windows":
            server_name = platform.node()
        elif platform.system() == "Linux":
            server_name = platform.node()
        elif platform.system() == "Darwin":
            server_name = platform.node()
        else:
            server_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"

        latency = random.uniform(0.01, 0.5)
        latency_ms = latency * 1000

        uptime_seconds = int(time.time() - start_time)
        uptime_days = uptime_seconds // (24 * 3600)
        uptime_hours = (uptime_seconds % (24 * 3600)) // 3600
        uptime_minutes = (uptime_seconds % 3600) // 60
        uptime_seconds = uptime_seconds % 60

        possible_latency = random.randint(1, 5)

        text = f"\U0001F5A5 –°–µ—Ä–≤–µ—Ä: {server_name}\n\u26A1 –ó–∞–¥–µ—Ä–∂–∫–∞: {latency_ms:.2f} –º—Å–µ–∫\n\u23F0 –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_days}–¥, {uptime_hours}—á, {uptime_minutes}–º\n\U0001F4CA –í–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {possible_latency}—Å"

        await message.answer(text)
    except Exception as e:
        await message.answer(f"\u274C –û—à–∏–±–∫–∞: {e}")


async def main():
    await dp.start_polling()

class SaveMessages(StatesGroup):
    saving = State()

raz_ids = [6558424230, 6998521871, 5932424109, 7241965595]
admin_ids = [ 7241965595 ]

conn = sqlite3.connect('honey.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS admin_users (
        user_id INTEGER PRIMARY KEY
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS honey (
        user_id INTEGER PRIMARY KEY,
        honey_count INTEGER DEFAULT 0,
        last_collection_ts INTEGER,
        username TEXT,
        user_link TEXT,
        theme TEXT DEFAULT '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        stones INTEGER DEFAULT 0
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS modules (
        chat_id INTEGER,
        module_name TEXT,
        is_enabled INTEGER DEFAULT 1,
        PRIMARY KEY (chat_id, module_name)
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS beta_access (
        chat_id INTEGER PRIMARY KEY,
        enabled INTEGER DEFAULT 0
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_modules (
        module_name TEXT PRIMARY KEY,
        module_type TEXT,
        description TEXT,
        commands TEXT,
        response_type TEXT,
        response_data TEXT
    )
''')

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
cursor.execute('''
    CREATE TABLE IF NOT EXISTS chat_history (
        user_id INTEGER,
        message TEXT,
        response TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
''')
conn.commit()

cursor.execute("SELECT user_id FROM admin_users")
admin_ids = [row[0] for row in cursor.fetchall()]

def check_permissions(user_id):
    return user_id in admin_ids or user_id in raz_ids


def update_db():
    while True:
        new_users = get_new_users()
        if new_users:
            for user_id, username in new_users:
                add_user_to_db(user_id, username)
        time.sleep(60)
def get_new_users():
    return [] 




@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    url_button1 = types.InlineKeyboardButton(text="‚ÑπÔ∏è my weekdays", url="https://t.me/rvh_ebator")
    url_button2 = types.InlineKeyboardButton(text="‚ûï", url="https://t.me/nevie_cfbot?startgroup=start")
    keyboard.add(url_button1, url_button2)
    
    quoted_message = f"""
üêô nevie - –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç –ø–æ <u>—Ç–µ–º–∞—Ç–∏–∫–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ.</u>
<blockquote>‚ÑπÔ∏è –ø—Ä–æ—Å–º–æ—Ç –º–µ–Ω—é –ø–æ —Å–ª–æ–≤—É - <code>–º–µ–Ω—é</code></blockquote>
    """

    await message.reply(quoted_message, reply_markup=keyboard, parse_mode=ParseMode.HTML)






@dp.message_handler(lambda message: message.text.lower() in ["–º–µ–Ω—é"])
async def commands(message: types.Message):

    rate = InlineKeyboardButton("–∑–∞—Ä–∞–±–∞—Ç–æ–∫", callback_data="rate")
    nick = InlineKeyboardButton("–æ—Å–Ω–æ–≤—ã", callback_data="nick")
    pref = InlineKeyboardButton("—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ", callback_data="pref")

    floor = InlineKeyboardMarkup(resize_keyboard=True, row_width=2)

    floor.row(rate, pref)
    floor.row(nick)


    await message.answer("""<b>–≤—ã–±–æ—Ä:</b>""", parse_mode="HTML", reply_markup=floor)



@dp.callback_query_handler(text=['backtocommlistbtn'])
async def back_to_commands(call: types.CallbackQuery):
    rate = InlineKeyboardButton("–∑–∞—Ä–∞–±–∞—Ç–æ–∫", callback_data="rate")
    nick = InlineKeyboardButton("–æ—Å–Ω–æ–≤—ã", callback_data="nick")
    pref = InlineKeyboardButton("—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ", callback_data="pref")

    floor = InlineKeyboardMarkup(resize_keyboard=True, row_width=2)
    floor.row(rate, pref)
    floor.row(nick)

    await call.message.edit_text("""<b>–≤—ã–±–æ—Ä:</b>""", parse_mode="HTML", reply_markup=floor)

@dp.callback_query_handler(text=['rate'])
async def rate_comms(call: types.CallbackQuery):
    btclb = InlineKeyboardButton("‚Ü©Ô∏è –≤–µ—Ä–Ω—É—Ç—Å—è", callback_data="backtocommlistbtn")
    floor = InlineKeyboardMarkup(resize_keyboard=True).add(btclb)

    await call.message.edit_text("""
<b>‚Ä¢</b> <code>–±–æ–Ω—É—Å</code> <b>&</b> <code>–≤–æ—Ä–∫</code>
<blockquote><b>—Ñ–∞—Ä–º –≤–∞—à–∏—Ö yun-coin, –≤ –¥–≤—É—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–π–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏,  3 —á–∞—Å–∞ –æ—Ç –±–æ–Ω—É—Å–∞, –∏ 20 –º–∏–Ω—É—Ç –æ—Ç –≤–æ—Ä–∫–∞.</b></blockquote>
<b>‚Ä¢</b> <code>–∑–∞–π—Ç–∏ –≤ —à–∞—Ö—Ç—É</code> <b>&</b> <code>–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å</code>
<blockquote><b>–∑–∞–π–¥–∏—Ç–µ –≤ —à–∞—Ö—Ç—É –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞–º–Ω–∏ —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Ö –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–∏–Ω—ã. –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–ª–∏—Ç –ø–æ –∫—É—Ä—Å—É –æ–¥–∏–Ω –∫–∞–º–µ–Ω—å - –¥–≤–∞ –∫–æ–∏–Ω–∞.</b></blockquote>
""", parse_mode="HTML", reply_markup=floor)


@dp.callback_query_handler(text=['nick'])
async def nick_comms(call: types.CallbackQuery):
    btclb = InlineKeyboardButton("‚Ü©Ô∏è –≤–µ—Ä–Ω—É—Ç—Å—è", callback_data="backtocommlistbtn")
    floor = InlineKeyboardMarkup(resize_keyboard=True).add(btclb)
    await call.message.edit_text("""
<b>‚Ä¢</b> <code>–∫–æ—à–µ–ª–µ–∫</code> <b>&</b> <code>—Å—É–º–∫–∞</code>
<blockquote><b>–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ. —Ç–∞–∫ –∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—É–º–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–æ–≤—è–µ—Ç –≤–∞–º —Ç–æ —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –∫–∞–º–Ω–µ–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏.</b></blockquote>
<b>‚Ä¢</b> <code>–æ—Ç–¥–∞—Ç—å [—Å—É–º–º–∞]</code>
<blockquote><b>–æ—Ç–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∫–∞–∑–∞–Ω—É—é —Å—É–º–º—É –∫–æ–∏–Ω–æ–≤ –Ω–∞ –µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤—ã–π —Å—á–µ—Ç.</b></blockquote>
<b>‚Ä¢</b> <code>—Ç–º–∞—Ç–∏–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç/–æ—Ñ–æ—Ä–º–∏—Ç–µ–ª—å–Ω–∞—è</code>
<blockquote><b>–º–µ–Ω—è–π—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö –∫—Ç–æ –Ω–µ –∂–µ–ª–∞–µ—Ç –≤–∏–¥–∏—Ç—å —Ü–∏—Ç–∏—Ä–æ–≤–∫—É.</b></blockquote>
""", parse_mode="HTML", reply_markup=floor)


@dp.callback_query_handler(text=['pref'])
async def pref_comms(call: types.CallbackQuery):
    btclb = InlineKeyboardButton("‚Ü©Ô∏è –≤–µ—Ä–Ω—É—Ç—Å—è", callback_data="backtocommlistbtn")
    floor = InlineKeyboardMarkup(resize_keyboard=True).add(btclb)
    await call.message.edit_text("""
<b>‚Ä¢</b> <code>/—Ä—É–ª–µ—Ç–∫–∞</code> <i>[—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏]</i>
<blockquote><b>–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Å, –Ω–∞ –∫–æ–Ω—É –≤—ã –∏ –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞.</b></blockquote>
<b>‚Ä¢</b> <code>/—ç–ª–∏—Ç</code> <i>[—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏]</i>
<blockquote><b>—ç–ª–∏—Ç–Ω–æ–µ –∫–∞–∑–∏–Ω–æ, —Å—ã–≥—Ä–∞–π—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π –≤ 10.000 —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É.</b></blockquote>
<b>‚Ä¢</b> <code>/–∫–∞–∑–∏–Ω–æ</code> <i>[—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏]</i>
<blockquote><b>–∏–≥—Ä–∞–µ—Ç–µ –≤ –∫–∞–∑–∏–Ω–æ —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –Ω–∞ –ø–æ–±–µ–¥—É —Å –±–æ–ª—å—à–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º.</b></blockquote>
<b>‚Ä¢</b> <code>/–∫–Ω–±</code> <i>[–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞] [—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏]</i>
<blockquote><b>–∏–≥—Ä–∞–π—Ç–µ –≤ –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞ —Å –Ω–µ–∫–∏–º –∏—Å–∫—É—Å—Ç–≤–µ–Ω—ã–º —Ä–∞–Ω–¥–æ–º–∞–π–∂–µ—Ä–æ–º.</b></blockquote>
    """, parse_mode="HTML", reply_markup=floor)






@dp.message_handler(Text(equals=['–ö–æ—à–µ–ª–µ–∫', '–∫–æ—à–µ–ª–µ–∫', '–∫–æ—à–µ–ª—ë–∫', '–ö–æ—à–µ–ª—ë–∫', '—è', '–Ø']))
async def my_backpack(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_link = f'<a href="tg://user?id={user_id}">{username}</a>'

    cursor.execute('SELECT 1 FROM honey WHERE user_id = ?', (user_id,))
    exists = cursor.fetchone()

    if not exists:
        cursor.execute('INSERT INTO honey (user_id, username, user_link) VALUES (?, ?, ?)', (user_id, username, user_link))
        conn.commit()

    cursor.execute('SELECT * FROM honey WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()

    if record:
        honey_count = record[1]
        theme = record[5]
    else:
        honey_count = 0
        theme = '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'

    if theme == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç':
        await message.reply(f"<u>–ö–æ—à–µ–ª–µ–∫</u> {user_link}\n<blockquote>–æ–±—ã—á–Ω—ã–π —Å—á–µ—Ç - <code>{honey_count}</code> <b>yun-coin</b></blockquote>", parse_mode=ParseMode.HTML)
    elif theme == '–æ—Ñ–æ—Ä–º–∏—Ç–µ–ª—å–Ω–∞—è':
        await message.reply(f"–ö–æ—à–µ–ª–µ–∫ {user_link},\n–≤–∞—à —Å—á–µ—Ç - <code>{honey_count}</code> yun-coin ü™ô", parse_mode=ParseMode.HTML)




@dp.message_handler(Text(startswith='—Ç–µ–º–∞—Ç–∏–∫–∞ '))
async def set_theme(message: types.Message):
    user_id = message.from_user.id
    theme_choice = message.text.split(' ')[1].lower()

    cursor.execute('SELECT theme FROM honey WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()
    current_theme = record[0] if record else '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'

    if theme_choice == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç':
        if current_theme == '—Å—Ç–∞–Ω–¥—Ä—Ç':
            await message.reply('–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞.')
        else:
            cursor.execute('UPDATE honey SET theme = ? WHERE user_id = ?', ('—Å—Ç–∞–Ω–¥–∞—Ä—Ç', user_id))
            conn.commit()
            await message.reply('–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é.', parse_mode="HTML")
    elif theme_choice == '–æ–±—ã—á–Ω–∞—è':
        if current_theme == '–æ–±—ã—á–Ω–∞—è':
            await message.reply('–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–∞ "–æ–±—ã—á–Ω–∞—è".', parse_mode="HTML")
        else:
            cursor.execute('UPDATE honey SET theme = ? WHERE user_id = ?', ('–æ—Ñ–æ—Ä–º–∏—Ç–µ–ª—å–Ω–∞—è', user_id))
            conn.commit()
            await message.reply('–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "–æ–±—ã—á–Ω–∞—è".', parse_mode="HTML")
    elif theme_choice == '–æ–±—ã—á–Ω–∞—è':
        await message.reply('–ö–∞–∂–µ—Ç—Å—è, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É "–æ–±—ã—á–Ω–∞—è". –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —ç—Ç—É —Ç–µ–º—É? ', parse_mode="HTML")
    else:
        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–º—ã. –î–æ—Å—Ç—É–ø–Ω—ã —Ç–µ–º—ã: —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –æ—Ñ–æ—Ä–º–∏—Ç–µ–ª—å–Ω–∞—è.', parse_mode="HTML")







@dp.message_handler(lambda message: message.text.lower() == '–±–æ–Ω—É—Å')
async def gather_honey(message: types.Message):
    if not await check_module(message, '–±–æ–Ω—É—Å'):
        return
    user_id = message.from_user.id
    current_ts = int(datetime.datetime.now().timestamp())
    command_name = '–±–æ–Ω—É—Å'

    cursor.execute('SELECT name FROM sqlite_master WHERE type="table" AND name="last_actions";')
    table_exists = cursor.fetchone() is not None

    if not table_exists:
        cursor.execute('CREATE TABLE last_actions (user_id INTEGER PRIMARY KEY, command_name TEXT, last_action_ts INTEGER);')
        conn.commit()

    cursor.execute('SELECT * FROM last_actions WHERE user_id = ? AND command_name = ?', (user_id, command_name))
    last_action_record = cursor.fetchone()

    if last_action_record:
        last_action_ts = last_action_record[2]
        time_since_last_action = current_ts - last_action_ts
        time_until_next_action = max(0, 3 * 60 * 60 - time_since_last_action)

        if time_since_last_action < 3 * 60 * 60:
            hours = time_until_next_action // 3600
            minutes = (time_until_next_action % 3600) // 60
            seconds = time_until_next_action % 60
            await message.reply(f"–í—ã —É–∂–µ –∑–∞–±—Ä–∞–ª–∏ –±–æ–Ω—É—Å –Ω–µ–¥–∞–≤–Ω–æ. <blockquote>–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å ÔøΩÔøΩ–Ω–æ–≤ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥.</blockquote>", parse_mode=ParseMode.HTML)
            return

    honey_to_add = random.randint(600, 2200)
    cursor.execute('SELECT * FROM honey WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()

    if record:
        new_honey_count = record[1] + honey_to_add
        cursor.execute('UPDATE honey SET honey_count = ? WHERE user_id = ?', (new_honey_count, user_id))
    else:
        cursor.execute('INSERT INTO honey (user_id, honey_count) VALUES (?, ?)', (user_id, honey_to_add))

    cursor.execute('REPLACE INTO last_actions (user_id, command_name, last_action_ts) VALUES (?, ?, ?)', (user_id, command_name, current_ts))

    conn.commit()

    await message.reply(f"–ë–æ–Ω—É—Å –≤ –≤–∏–¥–µ <code>{honey_to_add}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)






@dp.message_handler(lambda message: message.text.lower() == '–≤–æ—Ä–∫')
async def gather_honey(message: types.Message):
    if not await check_module(message, '–≤–æ—Ä–∫'):
        return
    user_id = message.from_user.id
    current_ts = int(datetime.datetime.now().timestamp())
    command_name = '–≤–æ—Ä–∫'

    cursor.execute('CREATE TABLE IF NOT EXISTS last_actions (user_id INTEGER, command_name TEXT, last_action_ts INTEGER, PRIMARY KEY (user_id, command_name))')

    cursor.execute('SELECT * FROM last_actions WHERE user_id = ? AND command_name = ?', (user_id, command_name))
    last_action_record = cursor.fetchone()

    if last_action_record:
        last_action_ts = last_action_record[2]
        time_since_last_action = current_ts - last_action_ts
        time_until_next_action = max(0, 20 * 60 - time_since_last_action) 

        if time_since_last_action < 20 * 60:
            minutes = (time_until_next_action % 3600) // 60
            seconds = time_until_next_action % 60
            await message.reply(f"–í—ã —É–∂–µ –±—ã–ª–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–æ–±–æ—Ç–µ. <blockquote>–í—ã —Å–º–æ–∂–µ—Ç–µ –µ—â–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥.</blockquote>", parse_mode=ParseMode.HTML)
            return

    honey_to_add = random.randint(350, 1250)
    cursor.execute('SELECT * FROM honey WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()

    if record:
        new_honey_count = record[1] + honey_to_add
        cursor.execute('UPDATE honey SET honey_count = ? WHERE user_id = ?', (new_honey_count, user_id))
    else:
        cursor.execute('INSERT INTO honey (user_id, honey_count) VALUES (?, ?)', (user_id, honey_to_add))

    cursor.execute('REPLACE INTO last_actions (user_id, command_name, last_action_ts) VALUES (?, ?, ?)', (user_id, command_name, current_ts))

    conn.commit()

    await message.reply(f"–í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ, –∏ –ø–æ–ª—É—á–∏–ª–∏ <code>{honey_to_add}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)






@dp.message_handler(lambda message: message.text.lower().startswith('–æ—Ç–¥–∞—Ç—å'))
async def give_honey(message: types.Message):
    user_id = message.from_user.id
    response_message = message.reply_to_message

    if response_message and response_message.from_user.id != user_id:
        try:
            if len(message.text.lower().split()) >= 2:
                amount = int(message.text.lower().split()[1]) 
            else:
                await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. <blockquote>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–æ—Ç–¥–∞—Ç—å <—á–∏—Å–ª–æ>'.</blockquote>", parse_mode=ParseMode.HTML)
                return

            if amount < 0:
                await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É.")
                return

            cursor.execute('SELECT * FROM honey WHERE user_id = ?', (user_id,))
            sender_record = cursor.fetchone()

            if not sender_record:
                cursor.execute('INSERT INTO honey (user_id, honey_count) VALUES (?, ?)', (user_id, 0))
                conn.commit()
                sender_record = cursor.fetchone()

            if sender_record[1] < amount:
                await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
                return

            cursor.execute('SELECT * FROM honey WHERE user_id = ?', (response_message.from_user.id,))
            recipient_record = cursor.fetchone()

            if not recipient_record:
                cursor.execute('INSERT INTO honey (user_id, honey_count) VALUES (?, ?)', (response_message.from_user.id, 0))
                conn.commit()
                recipient_record = cursor.fetchone()

            if sender_record and recipient_record:
                sender_new_balance = sender_record[1] - amount
                recipient_new_balance = recipient_record[1] + amount

                cursor.execute('UPDATE honey SET honey_count = ? WHERE user_id = ?', (sender_new_balance, user_id))
                cursor.execute('UPDATE honey SET honey_count = ? WHERE user_id = ?', (recipient_new_balance, response_message.from_user.id))
                conn.commit()

                await message.reply(f"{amount} yun-coin –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–æ—à–µ–ª–µ–∫ - {response_message.from_user.username}.\n<blockquote>–°—á–µ—Ç –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {sender_new_balance}</blockquote>", parse_mode=ParseMode.HTML)
            else:
                await message.reply("–£ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞.")
        except (IndexError, ValueError):
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. <blockquote>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–æ—Ç–¥–∞—Ç—å <—áÔøΩÔøΩ—Å–ª–æ>'.</blockquote>", parse_mode=ParseMode.HTML)
    else:
        await message.reply("<b>–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.</b>", parse_mode=ParseMode.HTML)





@dp.message_handler(commands=["–∫–Ω–±", "–ö–Ω–±"], commands_prefix='!./')
async def bot_rps(message: types.Message):
    if message.chat.type == 'private':
        await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!</b>", parse_mode=ParseMode.HTML)
        return

    if not await check_module(message, '–∫–Ω–±'):
        return

    try:
        args = message.text
        user_id = message.from_user.id
        username = message.from_user.username
        if len(args.split()) in [2, 3]:
            command, choice = args.split()[:2] 
            if choice not in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]:
                await message.reply("<b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.</b>", parse_mode=ParseMode.HTML)
                return

            cursor.execute("SELECT honey_count FROM honey WHERE user_id == ?", (user_id,))
            result = cursor.fetchone()
            if not result:
                await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin</b>", parse_mode=ParseMode.HTML)
                return

            if len(args.split()) == 3: 
                if args.split()[2] == "–≤–±":
                    bet = result[0]  
                elif args.split()[2].isdigit():
                    bet = int(args.split()[2])
                else:
                    await message.reply("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.</b>", parse_mode=ParseMode.HTML)
                    return
            else:  
                bet = result[0] 

            if result[0] < bet:
                await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin</b>", parse_mode=ParseMode.HTML)
                return

            user_choice = choice
            bot_choice = random.choice(["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])

            if user_choice == bot_choice:
                await message.reply(f"<blockquote>–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}</blockquote> <u>–ù–∏—á—å—è</u>", parse_mode=ParseMode.HTML)
            elif (user_choice == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or (user_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞") or (user_choice == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å"):
                cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id == ?",
                               (bet, user_id)) 
                conn.commit()
                await message.reply(f"<blockquote>–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}</blockquote> <u>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏</u>: +<code>{bet}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)
            else:
                cursor.execute("UPDATE honey SET honey_count = honey_count - ? WHERE user_id == ?", (bet, user_id)) 
                conn.commit()
                await message.reply(f"<blockquote>–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}</blockquote> <u>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏</u>: -<code>{bet}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)

        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. <blockquote>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–∫–Ω–± [–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞] [—Å—Ç–∞–≤–∫–∞] –∏–ª–∏ /–∫–Ω–± [–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞] –≤–±</blockquote>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.reply(f"<blockquote><code>{e}</code></blockquote>", parse_mode=ParseMode.HTML)





@dp.message_handler(commands=["—Ä—É–ª–µ—Ç–∫–∞", "–†—É–ª–µ—Ç–∫–∞"], commands_prefix='!./')
async def bot_russian_roulette(message: types.Message):
    if not await check_module(message, '—Ä—É–ª–µ—Ç–∫–∞'):
        return
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        cursor.execute("SELECT honey_count FROM honey WHERE user_id == ?", (user_id,))
        result = cursor.fetchone()

        if not result:
            await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin</b>", parse_mode=ParseMode.HTML)
        elif result[0] == 0:
            await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin –¥–ª—è –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É.</b>", parse_mode=ParseMode.HTML)
        else:
            bet = result[0] if message.text.split()[1] == "–≤–±" else int(message.text.split()[1])

            if bet > result[0]:
                await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.</b>", parse_mode=ParseMode.HTML)
                return

            roll = random.randint(1, 10)

            if roll <= 5: 
                cursor.execute("UPDATE honey SET honey_count = honey_count - ? WHERE user_id == ?", (bet, user_id))
                conn.commit()
                await message.reply(f"<blockquote>–ë–∞—Ä–∞–±–∞–Ω –∫—Ä—É—Ç–∏–ª—Å—è –∏... <b>–ë–ê–ë–ê–•!</b></blockquote> <u>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏</u>: -<code>{bet}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)
            elif roll <= 8: 
                multiplier = 1.5
                winnings = round(bet * (multiplier - 1))
                cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id == ?", (winnings, user_id))
                conn.commit()
                await message.reply(f"<blockquote>–ë–∞—Ä–∞–±–∞–Ω –∫—Ä—É—Ç–∏–ª—Å—è –∏... <b>–ö–õ–ò–ö!</b></blockquote> <u>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏</u>: +<code>{winnings}</code> <b>yun-coin</b> <b>(x{multiplier:.1f})</b>", parse_mode=ParseMode.HTML)
            else: 
                multiplier = 2
                winnings = round(bet * (multiplier - 1))
                cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id == ?", (winnings, user_id))
                conn.commit()
                await message.reply(f"<blockquote>–ë–∞—Ä–∞–±–∞–Ω –∫—Ä—É—Ç–∏–ª—Å—è –∏... <b>–ö–õ–ò–ö!</b></blockquote> <u>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏</u>: +<code>{winnings}</code> <b>yun-coin</b> <b>(x{multiplier:.1f})</b>", parse_mode=ParseMode.HTML)

    except Exception as e:
        await message.reply(f"<blockquote><code>{e}</code></blockquote>", parse_mode=ParseMode.HTML)





@dp.message_handler(commands=["—ç–ª–∏—Ç", "–≠–ª–∏—Ç"], commands_prefix='!./')
async def bot_elite_casino(message: types.Message):
    if not await check_module(message, '—ç–ª–∏—Ç'):
        return
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        cursor.execute("SELECT honey_count FROM honey WHERE user_id == ?", (user_id,))
        result = cursor.fetchone()

        if not result:
            await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin</b>", parse_mode=ParseMode.HTML)
        else:
            bet = message.text.split()[1]
            if not bet.isdigit():
                await message.reply("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return

            bet = int(bet)

            if bet < 10000:
                await message.reply("<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ —ç–ª–∏—Ç–Ω–æ–º –∫–∞–∑–∏–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 10000 yun-coin.</b>", parse_mode=ParseMode.HTML)
                return

            if bet > result[0]: 
                await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.</b>", parse_mode=ParseMode.HTML)
                return

            roll = random.randint(1, 100)

            if roll <= 90:
                multiplier = 0
            elif roll <= 97:
                multiplier = 3
            elif roll <= 99:
                multiplier = 4.5
            else:
                multiplier = 5

            if multiplier > 0:
                winnings = bet * multiplier
                cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id == ?", (winnings, user_id))
                conn.commit()
                await message.reply(f"<blockquote><b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b></blockquote> <u>–í—ã–∏–≥—Ä—ã—à</u>: +<code>{winnings}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)
            else:
                cursor.execute("UPDATE honey SET honey_count = honey_count - ? WHERE user_id == ?", (bet, user_id))
                conn.commit()
                await message.reply(f"<blockquote><b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏</b></blockquote> <u>–¢–µ—Ä—è–µ—Ç–µ</u>: -<code>{bet}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)

    except Exception as e:
        await message.reply(f"<blockquote><code>{e}</code></blockquote>", parse_mode=ParseMode.HTML)





@dp.message_handler(Command(["–∫–∞–∑–∏–Ω–æ", "–ö–∞–∑–∏–Ω–æ"], prefixes='!./'))
async def bot_casino(message: types.Message, state: FSMContext):
    if not await check_module(message, '–∫–∞–∑–∏–Ω–æ'):
        return
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        cursor.execute("SELECT honey_count FROM honey WHERE user_id == ?", (user_id,))
        result = cursor.fetchone()

        if not result:
            await message.reply(hbold("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin"), parse_mode='HTML')
            return

        if result[0] == 0:
            await message.reply(hbold("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin –¥–ª—è –∏–≥—Ä—ã –≤ –∫–∞ÔøΩÔøΩ–∏–Ω–æ."), parse_mode='HTML')
            return

        if len(message.text.split()) == 2 and message.text.split()[1] == "–≤–±":
            bet = result[0] 
        elif len(message.text.split()) == 2 and message.text.split()[1].isdigit():
            bet = int(message.text.split()[1])
        else:
            await message.reply(hbold("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–∫–∞–∑–∏–Ω–æ <ÔøΩÔøΩ—Ç–∞–≤–∫–∞> –∏–ª–∏ !–∫–∞–∑–∏ÔøΩÔøΩ–æ –≤–±."), parse_mode='HTML')
            return

        if bet > result[0]:
            await message.reply(hbold("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏."), parse_mode='HTML')
            return

        is_win = randint(0, 1)  

        if is_win: 
            cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id == ?", (bet, user_id))
            conn.commit()
            await message.reply(f"<blockquote><b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b></blockquote> <u>–ü–æ–ª—É—á–∞–µ—Ç–µ</u>: +<code>{bet}</code> <b>yun-coin</b>", parse_mode='HTML')
        else:  
            cursor.execute("UPDATE honey SET honey_count = honey_count - ? WHERE user_id == ?", (bet, user_id))
            conn.commit()
            await message.reply(f"<blockquote><b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote> <u>–¢–µ—Ä—è–µ—Ç–µ</u>: -<code>{bet}</code> <b>yun-coin</b>", parse_mode='HTML')

    except Exception as e:
        await message.reply(f"<blockquote><code>{e}</code></blockquote>", parse_mode='HTML')





@dp.message_handler(Command(["–û–±–Ω—É–ª–∏—Ç—å", "–æ–±–Ω—É–ª–∏—Ç—å"], prefixes='!./'))
async def reset_yun_coin(message: types.Message):
    if message.reply_to_message:
        reply_message = message.reply_to_message
        if check_permissions(message.from_user.id):
            try:
                user_id = reply_message.from_user.id
                cursor.execute("UPDATE honey SET honey_count = 0 WHERE user_id = ?", (user_id,))
                conn.commit()

                await message.reply(f'–ö–æ—à–µ–ª–µ–∫ {reply_message.from_user.username} –±—ã–ª –æ–±–Ω—É–ª–µ–Ω.')
            except Exception as e:
                await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ªÔøΩÔøΩ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
    else:
        await message.reply('–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å –µ–≥–æ ÔøΩÔøΩ—á–µ—Ç.')





@dp.message_handler(Command(["–í—ã–¥–∞—Ç—å", "–≤—ã–¥–∞—Ç—å"], prefixes='!./'))
async def give_yun_coin(message: types.Message):
    if message.reply_to_message:
        reply_message = message.reply_to_message
        if check_permissions(message.from_user.id):
            try:
                user_id = reply_message.from_user.id
                amount = int(message.text.split()[1])

                if amount < 0:
                    await message.reply('–ù–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ yun-coin.')
                    return

                cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id = ?", (amount, user_id))
                conn.commit()

                await message.reply(f'–í—ã–¥–∞–Ω–æ {amount} yun-coin –Ω–∞ –∫–æ—à–µ–ª–µ–∫ {reply_message.from_user.username}.')
            except ValueError:
                await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ yun-coin.')
            except Exception as e:
                await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
    else:
        await message.reply('–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –µ–º—É yun-coin.')





@dp.message_handler(Command(["–ó–∞–±—Ä–∞—Ç—å", "–∑–∞–±—Ä–∞—Ç—å"], prefixes='!./'))
async def withdraw_yun_coin(message: types.Message):
    if message.reply_to_message:
        reply_message = message.reply_to_message
        if check_permissions(message.from_user.id):
            try:
                user_id = reply_message.from_user.id
                amount = int(message.text.split()[1])

                if amount < 0:
                    await message.reply('–ù–µ–ª—å–∑—è –∑–∞–±–∏—Ä–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ yun-coin.')
                    return

                cursor.execute("UPDATE honey SET honey_count = honey_count - ? WHERE user_id = ?", (amount, user_id))
                conn.commit()

                await message.reply(f'{amount} yun-coin –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ —Å –∫–æ—à–µ–ª—å–∫–∞ {reply_message.from_user.username}.')
            except ValueError:
                await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ yun-coin.')
            except Exception as e:
                await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
    else:
        await message.reply('–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å —É –Ω–µ–≥–æ yun-coin.')





@dp.message_handler(Command(["–î–æ–±–∞–≤–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å"], prefixes='!./'))
async def add_admin(message: types.Message):
    if message.reply_to_message:
        reply_message = message.reply_to_message
        if message.from_user.id in raz_ids:
            try:
                user_id = reply_message.from_user.id
                if user_id not in admin_ids:
                    cursor.execute("INSERT INTO admin_users (user_id) VALUES (?)", (user_id,))
                    conn.commit()
                    admin_ids.append(user_id)
                    await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reply_message.from_user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')
                else:
                    await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reply_message.from_user.username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
            except Exception as e:
                await message.reply(f'–ü—Ä–æ–∏–∑–æ–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥ÔøΩÔøΩ—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
    else:
        await message.reply('–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')





@dp.message_handler(Text(equals=['–∞–¥–º–∏–Ω—ã', '/–∞–¥–º–∏–Ω—ã', '!–∞–¥–º–∏–Ω—ã', '–ê–¥–º–∏–Ω—ã']))
async def show_admins(message: types.Message):
    if check_permissions(message.from_user.id):
        try:
            cursor.execute("SELECT user_id FROM admin_users")
            admins = cursor.fetchall()
            
            if not admins:
                await message.reply("<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.</b>", parse_mode=ParseMode.HTML)
                return
                
            text = "<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:</b>\n\n"
            for admin_id in admins:
                try:
                    admin_info = await bot.get_chat(admin_id[0])
                    username = admin_info.username or admin_info.first_name
                    text += f"<blockquote>‚Ä¢ @{username}</blockquote>\n"
                except:
                    text += f"<blockquote>‚Ä¢ ID: {admin_id[0]}</blockquote>\n"
                
            await message.reply(text, parse_mode=ParseMode.HTML)
        except Exception as e:
            await message.reply(f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{e}</code>", parse_mode=ParseMode.HTML)
    else:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>\n<blockquote>—Ç—Ä–µ–±—É–µ—Ç—Å—è: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</blockquote>", parse_mode=ParseMode.HTML)

@dp.message_handler(Text(equals=['.–ª–∏—Å—Ç']))
async def show_admins(message: types.Message):
    if check_permissions(message.from_user.id):
        try:
            cursor.execute("SELECT user_id FROM admin_users")
            admins = cursor.fetchall()
            
            text = "<b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:</b>\n"
            for dev_id in raz_ids:
                try:
                    dev_info = await bot.get_chat(dev_id)
                    username = dev_info.username or dev_info.first_name
                    text += f"<blockquote>‚Ä¢ @{username}</blockquote>\n"
                except:
                    text += f"<blockquote>‚Ä¢ ID: {dev_id}</blockquote>\n"
            
            text += "\n<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:</b>\n"
            if not admins:
                text += "<blockquote>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.</blockquote>"
            else:
                for admin_id in admins:
                    if admin_id[0] not in raz_ids:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ
                        try:
                            admin_info = await bot.get_chat(admin_id[0])
                            username = admin_info.username or admin_info.first_name
                            text += f"<blockquote>‚Ä¢ @{username}</blockquote>\n"
                        except:
                            text += f"<blockquote>‚Ä¢ ID: {admin_id[0]}</blockquote>\n"
                
            await message.reply(text, parse_mode=ParseMode.HTML)
        except Exception as e:
            await message.reply(f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{e}</code>", parse_mode=ParseMode.HTML)
    else:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>\n<blockquote>—Ç—Ä–µ–±—É–µ—Ç—Å—è: –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</blockquote>", parse_mode=ParseMode.HTML)


# –†–∞–∑–¥–µ–ª—è–µ–º –º–æ–¥—É–ª–∏ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
SYSTEM_MODULES = {
    '–±–æ–Ω—É—Å': '–°–∏—Å—Ç–µ–º–∞ –±–æ–Ω—É—Å–æ–≤',
    '–≤–æ—Ä–∫': '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç—ã',
    '—à–∞—Ö—Ç–∞': '–®–∞—Ö—Ç–∞ –∏ –¥–æ–±—ã—á–∞ –∫–∞–º–Ω–µ–π',
    '–º—É–∑—ã–∫–∞': '–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏',
    '—Ä—É–ª–µ—Ç–∫–∞': '–ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É',
    '–∫–∞–∑–∏–Ω–æ': '–ò–≥—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ',
    '–∫–Ω–±': '–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞',
    '—ç–ª–∏—Ç': '–≠–ª–∏—Ç–Ω–æ–µ –∫–∞–∑–∏–Ω–æ'
}

USER_MODULES = {
    # –ó–¥–µ—Å—å –±—É–¥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏
}

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π
AVAILABLE_MODULES = {**SYSTEM_MODULES, **USER_MODULES}

@dp.message_handler(Text(equals=['–º–æ–¥–∏', '/–º', '!–º–ª–∏']))
async def list_modules(message: types.Message):
    if message.chat.type == 'private':
        await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!</b>", parse_mode=ParseMode.HTML)
        return
        
    if not check_permissions(message.from_user.id):
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏.</b>", parse_mode=ParseMode.HTML)
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    sys_btn = InlineKeyboardButton("–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏", callback_data="sys_modules")
    user_btn = InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏ [—Å–∫–æ—Ä–æ]", callback_data="user_modules")
    keyboard.add(sys_btn, user_btn)

    await message.reply("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥—É–ª–µ–π:</b>", reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query_handler(lambda c: c.data in ['sys_modules', 'user_modules'])
async def show_modules(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    
    if callback_query.data == 'user_modules':
        if await has_beta_access(chat_id):
            text = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏</b>\n\n"
            if USER_MODULES:
                text += "<blockquote>–í–∞—à–∏ –º–æ–¥—É–ª–∏:</blockquote>\n"
                keyboard = InlineKeyboardMarkup(row_width=2)
                for module_name, description in USER_MODULES.items():
                    text += f"<blockquote>‚Ä¢ {module_name} - {description}</blockquote>\n"
                    info_btn = InlineKeyboardButton(f"‚ÑπÔ∏è {module_name}", callback_data=f"info_{module_name}")
                    keyboard.add(info_btn)
                
                create_btn = InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å", callback_data="create_module")
                delete_btn = InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å", callback_data="delete_module")
                back_btn = InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_modules")
                keyboard.add(create_btn)
                keyboard.add(delete_btn)
                keyboard.add(back_btn)
            else:
                text += "<blockquote>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π</blockquote>\n"
                keyboard = InlineKeyboardMarkup(row_width=2)
                create_btn = InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –º–æ–¥—É–ª—å", callback_data="create_module")
                back_btn = InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_modules")
                keyboard.add(create_btn)
                keyboard.add(back_btn)
        else:
            text = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏</b>\n\n"
            text += "<blockquote>‚ö†Ô∏è –í–∫–ª—é—á–∏—Ç—å –±–µ—Ç–∞ –≤–µ—Ä—Å–∏—é?\n<i>–í–Ω–∏–º–∞–Ω–∏–µ: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é</i></blockquote>"
            keyboard = InlineKeyboardMarkup(row_width=2)
            enable_btn = InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å ‚ö°Ô∏è", callback_data="enable_beta")
            back_btn = InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_modules")
            keyboard.add(enable_btn, back_btn)
        
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        return

    modules_dict = SYSTEM_MODULES
    text = "<b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n\n"
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    for module_name, description in modules_dict.items():
        is_enabled = await is_module_enabled(callback_query.message.chat.id, module_name)
        status = "‚úÖ" if is_enabled else "‚ùå"
        text += f"<blockquote>‚Ä¢ {module_name} - {description} {status}</blockquote>\n"
        info_btn = InlineKeyboardButton(f"‚ÑπÔ∏è {module_name}", callback_data=f"info_{module_name}")
        keyboard.add(info_btn)
    
    text += "\n<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
    text += "<code>!–≤–∫–ª</code> [–º–æ–¥—É–ª—å] - –≤–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å\n"
    text += "<code>!–≤—ã–∫–ª</code> [–º–æ–¥—É–ª—å] - –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å"
    
    back_btn = InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_modules")
    keyboard.add(back_btn)
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query_handler(lambda c: c.data.startswith("info_"))
async def show_module_info(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await callback_query.answer()  # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        
        module_name = callback_query.data.replace("info_", "")
        module_data = None
        module_type = "–°–∏—Å—Ç–µ–º–Ω—ã–π" if module_name in SYSTEM_MODULES else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"
        
        if module_name in USER_MODULES:
            cursor.execute('SELECT * FROM user_modules WHERE module_name = ?', (module_name,))
            module_data = cursor.fetchone()
        
        text = f"<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ '{module_name}'</b>\n\n"
        text += f"<blockquote>üîπ –¢–∏–ø: {module_type}\n"
        
        if module_name in SYSTEM_MODULES:
            text += f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {SYSTEM_MODULES[module_name]}\n"
            if module_name == '—à–∞—Ö—Ç–∞':
                text += "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                text += "‚Ä¢ <code>–∑–∞–π—Ç–∏ –≤ —à–∞—Ö—Ç—É</code> - –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É –∫–∞–º–Ω–µ–π\n"
                text += "‚Ä¢ <code>–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å</code> - –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–º–Ω–∏ –≤ –º–æ–Ω–µ—Ç—ã\n"
                text += "‚Ä¢ <code>—Å—É–º–∫–∞</code> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–Ω–µ–π\n"
            elif module_name == '–∫–Ω–±':
                text += "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                text += "‚Ä¢ <code>/–∫–Ω–± [–∫–∞–º–µÔøΩÔøΩ—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞] [—Å—Ç–∞–≤–∫–∞]</code>\n"
                text += "‚Ä¢ <code>/–∫–Ω–± [–≤—ã–±–æ—Ä] –≤–±</code> - —Å—Ç–∞–≤–∫–∞ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n"
            elif module_name == '—ÄÔøΩÔøΩ–ª–µ—Ç–∫–∞':
                text += "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                text += "‚Ä¢ <code>/—Ä—É–ª–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞]</code>\n"
                text += "‚Ä¢ <code>/—Ä—É–ª–µ—Ç–∫–∞ –≤–±</code> - —Å—Ç–∞–≤–∫–∞ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n"
            elif module_name == '–∫–∞–∑–∏–Ω–æ':
                text += "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                text += "‚Ä¢ <code>/–∫–∞–∑–∏–Ω–æ [—Å—Ç–∞–≤–∫–∞]</code>\n"
                text += "‚Ä¢ <code>/–∫–∞–∑–∏–Ω–æ –≤–±</code> - —Å—Ç–∞–≤–∫–∞ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n"
            elif module_name == '—ç–ª–∏—Ç':
                text += "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                text += "‚Ä¢ <code>/—ç–ª–∏—Ç [—Å—Ç–∞–≤–∫–∞]</code> - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10000\n"
            elif module_name == '–±–æ–Ω—É—Å':
                text += "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                text += "‚Ä¢ <code>–±–æ–Ω—É—Å</code> - –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å (–¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ 3 —á–∞—Å–∞)\n"
            elif module_name == '–≤–æ—Ä–∫':
                text += "\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
                text += "‚Ä¢ <code>–≤–æ—Ä–∫</code> - –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ºÔøΩÔøΩ–Ω–µ—Ç—ã (–¥–æ—Å—Ç—É–ø–µ–Ω —Ä–∞–∑ –≤ 20 –º–∏–Ω—É—Ç)\n"
        elif module_data:
            text += f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {module_data[2]}\n"
            text += f"üîπ –ö–æ–º–∞–Ω–¥—ã: {module_data[3]}\n"
            text += f"üîπ –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {module_data[4]}\n"
            if module_data[4] == 'text':
                text += f"üîπ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {module_data[5]}\n"
            elif module_data[4] == 'photo':
                text += "üîπ –û—Ç–≤–µ—Ç: –§–æ—Ç–æ —Å –ø–æ–¥–øÔøΩÔøΩ—Å—å—é\n"
            elif module_data[4] == 'buttons':
                text += "üîπ –û—Ç–≤–µ—Ç: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
        
        is_enabled = await is_module_enabled(callback_query.message.chat.id, module_name)
        text += f"\nüîπ –°–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω ‚úÖ' if is_enabled else '–í—ã–∫–ª—é—á–µ–Ω ‚ùå'}</blockquote>"
        
        keyboard = InlineKeyboardMarkup(row_width=2)
        if not is_enabled:
            enable_btn = InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data=f"enable_{module_name}")
            keyboard.add(enable_btn)
        else:
            disable_btn = InlineKeyboardButton("‚ùå –í—ã–∫–ª—é—á–∏—Ç—å", callback_data=f"disable_{module_name}")
            keyboard.add(disable_btn)
        
        back_btn = InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="sys_modules" if module_name in SYSTEM_MODULES else "user_modules")
        keyboard.add(back_btn)
        
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    except Exception as e:
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@dp.callback_query_handler(lambda c: c.data.startswith(("enable_", "disable_")))
async def toggle_module(callback_query: types.CallbackQuery):
    action, module_name = callback_query.data.split("_")
    if not check_permissions(callback_query.from_user.id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏!", show_alert=True)
        return
    
    is_enabled = action == "enable"
    cursor.execute('INSERT OR REPLACE INTO modules (chat_id, module_name, is_enabled) VALUES (?, ?, ?)',
                  (callback_query.message.chat.id, module_name, int(is_enabled)))
    conn.commit()
    
    await callback_query.answer(f"–ú–æ–¥—É–ª—å {module_name} {'–≤–∫–ª—é—á–µ–Ω' if is_enabled else '–≤—ã–∫–ª—é—á–µ–Ω'}!")
    await show_module_info(callback_query, None)

@dp.callback_query_handler(lambda c: c.data == "back_to_modules")
async def back_to_modules_menu(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    sys_btn = InlineKeyboardButton("–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏", callback_data="sys_modules")
    user_btn = InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏ [—Å–∫–æ—Ä–æ]", callback_data="user_modules")
    keyboard.add(sys_btn, user_btn)
    
    await callback_query.message.edit_text("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–æ–¥—É–ª–µ–π:</b>", 
                                         reply_markup=keyboard, 
                                         parse_mode=ParseMode.HTML)

@dp.callback_query_handler(lambda c: c.data == "enable_beta")
async def enable_beta(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    cursor.execute('INSERT OR REPLACE INTO beta_access (chat_id, enabled) VALUES (?, 1)', (chat_id,))
    conn.commit()
    
    text = "<b>‚ö°Ô∏è –ë–µ—Ç–∞ –≤–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
    text += "<blockquote>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –º–æ–¥—É–ª—è–º.\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–ΩÔøΩÔøΩ–µ: —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ.</blockquote>"
    keyboard = InlineKeyboardMarkup()
    back_btn = InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_modules")
    keyboard.add(back_btn)
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, –¥–æ–±–∞–≤–ª—è—è –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥—É–ª—è
async def check_module(message: types.Message, module_name: str) -> bool:
    if not await is_module_enabled(message.chat.id, module_name):
        await message.reply(f"<b>–ú–æ–¥—É–ª—å '{module_name}' –æ—Ç–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.</b>", parse_mode=ParseMode.HTML)
        return False
    return True

async def is_module_enabled(chat_id: int, module_name: str) -> bool:
    cursor.execute('SELECT is_enabled FROM modules WHERE chat_id = ? AND module_name = ?', (chat_id, module_name))
    result = cursor.fetchone()
    if result is None:
        cursor.execute('INSERT INTO modules (chat_id, module_name, is_enabled) VALUES (?, ?, 1)', (chat_id, module_name))
        conn.commit()
        return True
    return bool(result[0])

@dp.message_handler(commands=['–≤–∫–ª'])
async def enable_module(message: types.Message):
    if message.chat.type == 'private':
        await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!</b>", parse_mode=ParseMode.HTML)
        return
        
    if not check_permissions(message.from_user.id):
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏.</b>", parse_mode=ParseMode.HTML)
        return

    args = message.text.split()
    if len(args) != 2:
        await message.reply("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/–≤–∫–ª –Ω–∞–∑–≤–∞–Ω–∏–µ_–º–æ–¥—É–ª—è</code>", parse_mode=ParseMode.HTML)
        return

    module_name = args[1].lower()
    if module_name not in AVAILABLE_MODULES:
        modules_list = "\n".join([f"‚Ä¢ {name}" for name in AVAILABLE_MODULES.keys()])
        await message.reply(f"<b>–ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:</b>\n{modules_list}", parse_mode=ParseMode.HTML)
        return

    cursor.execute('INSERT OR REPLACE INTO modules (chat_id, module_name, is_enabled) VALUES (?, ?, 1)',
                  (message.chat.id, module_name))
    conn.commit()
    await message.reply(f"<b>–ú–æ–¥—É–ª—å '{module_name}' –≤–∫–ª—é—á–µ–Ω.</b>", parse_mode=ParseMode.HTML)

@dp.message_handler(commands=['–≤—ã–∫–ª'])
async def disable_module(message: types.Message):
    if message.chat.type == 'private':
        await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!</b>", parse_mode=ParseMode.HTML)
        return
        
    if not check_permissions(message.from_user.id):
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æÔøΩÔøΩ–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏.</b>", parse_mode=ParseMode.HTML)
        return

    args = message.text.split()
    if len(args) != 2:
        await message.reply("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>/–≤—ã–∫–ª –Ω–∞–∑–≤–∞–Ω–∏ÔøΩÔøΩ_–º–æ–¥—É–ª—è</code>", parse_mode=ParseMode.HTML)
        return

    module_name = args[1].lower()
    if module_name not in AVAILABLE_MODULES:
        modules_list = "\n".join([f"‚Ä¢ {name}" for name in AVAILABLE_MODULES.keys()])
        await message.reply(f"<b>–ú–æ–¥—É–ª—å '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n\n<b>–î–æ—Å—Ç—É–ø–ΩÔøΩÔøΩ–µ –º–æ–¥—É–ª–∏:</b>\n{modules_list}", parse_mode=ParseMode.HTML)
        return

    cursor.execute('INSERT OR REPLACE INTO modules (chat_id, module_name, is_enabled) VALUES (?, ?, 0)',
                  (message.chat.id, module_name))
    conn.commit()
    await message.reply(f"<b>–ú–æ–¥—É–ª—å '{module_name}' –≤—ã–∫–ª—é—á–µ–Ω.</b>", parse_mode=ParseMode.HTML)

@dp.message_handler(Command(['–≤–∫–ª', '–≤—ã–∫–ª'], prefixes='!./'))
async def handle_module_command(message: types.Message):
    command = message.text.split()[0][1:] # —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    if command == '–≤–∫–ª':
        await enable_module(message)
    else:
        await disable_module(message)

@dp.message_handler(Text(equals=['–∑–∞–π—Ç–∏ –≤ —à–∞—Ö—Ç—É', '—à–∞—Ö—Ç–∞', '/—à–∞—Ö—Ç–∞', '!—à–∞—Ö—Ç–∞']))
async def mine_stones(message: types.Message):
    if message.chat.type != 'private':
        await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!</b>", parse_mode=ParseMode.HTML)
        return

    if not await check_module(message, '—à–∞—Ö—Ç–∞'):
        return

    keyboard = InlineKeyboardMarkup()
    mine_btn = InlineKeyboardButton("‚õè –ö–æ–ø–∞—Ç—å", callback_data="mine_stones")
    keyboard.add(mine_btn)
    
    await message.reply("<b>‚õ∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∞—Ö—Ç—É!</b>\n<blockquote>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É.</blockquote>", 
                       reply_markup=keyboard, 
                       parse_mode=ParseMode.HTML)

@dp.callback_query_handler(lambda c: c.data == "mine_stones")
async def mine_stones_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    stones_found = random.randint(1, 5)
    
    cursor.execute('SELECT stones FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    if user:
        new_stones = user[0] + stones_found
        cursor.execute('UPDATE users SET stones = ? WHERE user_id = ?', (new_stones, user_id))
    else:
        cursor.execute('INSERT INTO users (user_id, stones) VALUES (?, ?)', 
                      (user_id, stones_found))
    
    conn.commit()

    keyboard = InlineKeyboardMarkup()
    mine_btn = InlineKeyboardButton("‚õè –ö–æ–ø–∞—Ç—å –µ—â—ë", callback_data="mine_stones")
    keyboard.add(mine_btn)
    
    await callback_query.message.edit_text(
        f"<b>‚õ∞ –®–∞—Ö—Ç–∞</b>\n<blockquote>üéâ –í—ã –Ω–∞—à–ª–∏ {stones_found} –∫–∞–º–Ω–µ–π!</blockquote>",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

@dp.message_handler(Text(equals=['–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å', '/–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å', '!–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å']))
async def process_stones(message: types.Message):
    if message.chat.type != 'private':
        await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!</b>", parse_mode=ParseMode.HTML)
        return

    if not await check_module(message, '—à–∞—Ö—Ç–∞'):
        return

    user_id = message.from_user.id
    
    cursor.execute('SELECT stones FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    if not user or user[0] == 0:
        await message.reply("<blockquote>–£ –≤–∞—Å –Ω–µ—Ç –∫–∞–º–Ω–µ–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏!</blockquote>", parse_mode=ParseMode.HTML)
        return
    
    stones = user[0]
    coins = stones * 2  # –ö–∞–∂–¥—ã–π –∫–∞–º–µ–Ω—å –¥–∞—ë—Ç 2 –º–æ–Ω–µ—Ç—ã
    
    cursor.execute('UPDATE users SET stones = 0 WHERE user_id = ?', (user_id,))
    cursor.execute('SELECT honey_count FROM honey WHERE user_id = ?', (user_id,))
    honey_record = cursor.fetchone()
    
    if honey_record:
        new_honey = honey_record[0] + coins
        cursor.execute('UPDATE honey SET honey_count = ? WHERE user_id = ?', (new_honey, user_id))
    else:
        cursor.execute('INSERT INTO honey (user_id, honey_count) VALUES (?, ?)', (user_id, coins))
    
    conn.commit()
    await message.reply(f"<blockquote>–í—ã –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–ª–∏ {stones} –∫–∞–º–Ω–µ–π –∏ –ø–æ–ª—É—á–∏–ª–∏ {coins} yun-coin!</blockquote>", parse_mode=ParseMode.HTML)

@dp.message_handler(Text(equals=['—Å—É–º–∫–∞', '/—Å—É–º–∫–∞', '!—Å—É–º–∫–∞']))
async def show_backpack(message: types.Message):
    if message.chat.type != 'private':
        await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!</b>", parse_mode=ParseMode.HTML)
        return

    if not await check_module(message, '—à–∞—Ö—Ç–∞'):
        return

    user_id = message.from_user.id
    cursor.execute('SELECT stones FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    if not user:
        stones = 0
    else:
        stones = user[0]
    
    await message.reply(f"<blockquote>–í –≤–∞—à–µ–π —Å—É–º–∫–µ {stones} –∫–∞–º–Ω–µ–π</blockquote>", parse_mode=ParseMode.HTML)

async def has_beta_access(chat_id: int) -> bool:
    cursor.execute('SELECT enabled FROM beta_access WHERE chat_id = ?', (chat_id,))
    result = cursor.fetchone()
    return bool(result[0]) if result else False

class ModuleCreation(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_commands = State()
    waiting_for_response_type = State()
    waiting_for_text = State()
    waiting_for_photo = State()
    waiting_for_buttons = State()
    waiting_for_confirmation = State()

@dp.callback_query_handler(lambda c: c.data == "create_module")
async def create_module_menu(callback_query: types.CallbackQuery):
    text = "<b>üõ† –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–æ–¥—É–ª—è</b>\n\n"
    text += "<blockquote>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥—É–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:</blockquote>"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    game_btn = InlineKeyboardButton("üéÆ –ò–≥—Ä–æ–≤–æ–π", callback_data="create_game_module")
    util_btn = InlineKeyboardButton("üîß –£—Ç–∏–ª–∏—Ç–∞", callback_data="create_util_module")
    back_btn = InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="user_modules")
    
    keyboard.add(game_btn, util_btn)
    keyboard.add(back_btn)
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query_handler(lambda c: c.data.startswith("create_"))
async def start_module_creation(callback_query: types.CallbackQuery, state: FSMContext):
    module_type = callback_query.data.replace("create_", "")
    
    if module_type not in ["game_module", "util_module"]:
        await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–æ–¥—É–ª—è!", show_alert=True)
        return
        
    await ModuleCreation.waiting_for_name.set()
    await state.update_data(module_type=module_type)
    
    text = "<b>üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è - –®–∞–≥ 1/3</b>\n\n"
    text += "<blockquote>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–º–∏–Ω–∏-–∏–≥—Ä–∞' –∏–ª–∏ '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'):</blockquote>"
    
    keyboard = InlineKeyboardMarkup()
    cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    keyboard.add(cancel_btn)
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.message_handler(state=ModuleCreation.waiting_for_name)
async def process_module_name(message: types.Message, state: FSMContext):
    module_name = message.text.lower()
    
    if module_name in AVAILABLE_MODULES:
        await message.reply("<b>‚ùå –ú–æ–¥—É–ª—å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.</b>", parse_mode=ParseMode.HTML)
        return
        
    await state.update_data(module_name=module_name)
    await ModuleCreation.waiting_for_description.set()
    
    text = "<b>üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è - –®–∞–≥ 2/3</b>\n\n"
    text += "<blockquote>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è:</blockquote>"
    
    keyboard = InlineKeyboardMarkup()
    cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    keyboard.add(cancel_btn)
    
    await message.reply(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.message_handler(state=ModuleCreation.waiting_for_description)
async def process_module_description(message: types.Message, state: FSMContext):
    description = message.text
    await state.update_data(description=description)
    await ModuleCreation.waiting_for_commands.set()
    
    text = "<b>üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è - –®–∞–≥ 3/3</b>\n\n"
    text += "<blockquote>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: !–∏–≥—Ä–∞, /–∏–≥—Ä–∞, –∏–≥—Ä–∞):</blockquote>"
    
    keyboard = InlineKeyboardMarkup()
    cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    keyboard.add(cancel_btn)
    
    await message.reply(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.message_handler(state=ModuleCreation.waiting_for_commands)
async def process_module_commands(message: types.Message, state: FSMContext):
    commands = [cmd.strip() for cmd in message.text.split(',')]
    await state.update_data(commands=commands)
    
    text = "<b>üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥—É–ª—è</b>\n\n"
    text += "<blockquote>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è:</blockquote>"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    text_btn = InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç", callback_data="response_text")
    photo_btn = InlineKeyboardButton("üñº –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç", callback_data="response_photo")
    buttons_btn = InlineKeyboardButton("üîò –ö–Ω–æ–ø–∫–∏", callback_data="response_buttons")
    cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    
    keyboard.add(text_btn, photo_btn)
    keyboard.add(buttons_btn)
    keyboard.add(cancel_btn)
    
    await ModuleCreation.waiting_for_response_type.set()
    await message.reply(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query_handler(lambda c: c.data == "cancel_creation", state="*")
async def cancel_module_creation(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await create_module_menu(callback_query)

@dp.callback_query_handler(lambda c: c.data.startswith("response_"), state=ModuleCreation.waiting_for_response_type)
async def process_response_type(callback_query: types.CallbackQuery, state: FSMContext):
    response_type = callback_query.data.replace("response_", "")
    await state.update_data(response_type=response_type)
    
    if response_type == "text":
        text = "<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞</b>\n\n"
        text += "<blockquote>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞:\n"
        text += "‚Ä¢ &lt;b&gt;–∂–∏—Ä–Ω—ã–π&lt;/b&gt;\n"
        text += "‚Ä¢ &lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;\n"
        text += "‚Ä¢ &lt;code&gt;–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π&lt;/code&gt;\n"
        text += "‚Ä¢ &lt;blockquote&gt;—Ü–∏—Ç–∞—Ç–∞&lt;/blockquote&gt;</blockquote>"
    elif response_type == "photo":
        text = "<b>üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ</b>\n\n"
        text += "<blockquote>–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫ –Ω–µ–º—É –ø–æ–¥–ø–∏—Å—å.</blockquote>"
    else:  # buttons
        text = "<b>üîò –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫</b>\n\n"
        text += "<blockquote>–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        text += "—Ç–µ–∫—Å—Ç1 = —Å—Å—ã–ª–∫–∞1\n"
        text += "—Ç–µ–∫—Å—Ç2 = —Å—Å—ã–ª–∫–∞2\n"
        text += "—Ç–µ–∫—Å—Ç3</blockquote>"
    
    keyboard = InlineKeyboardMarkup()
    cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    keyboard.add(cancel_btn)
    
    await ModuleCreation.waiting_for_text.set()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.message_handler(state=ModuleCreation.waiting_for_text, content_types=['text', 'photo'])
async def process_response_content(message: types.Message, state: FSMContext):
    data = await state.get_data()
    response_type = data.get('response_type')
    
    if response_type == "photo" and not message.photo:
        await message.reply("<b>‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.</b>", parse_mode=ParseMode.HTML)
        return
    
    if response_type == "photo":
        photo_file_id = message.photo[-1].file_id
        await state.update_data(photo=photo_file_id)
        text = "<b>üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ</b>"
        await ModuleCreation.waiting_for_text.set()
    elif response_type == "buttons":
        buttons = []
        for line in message.text.split('\n'):
            if '=' in line:
                text, url = line.split('=', 1)
                buttons.append({"text": text.strip(), "url": url.strip()})
            else:
                buttons.append({"text": line.strip()})
        await state.update_data(buttons=buttons)
    
    await state.update_data(text=message.text)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    text = "<b>üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è</b>\n\n"
    text += f"<blockquote>–¢–∏–ø: {'üéÆ –ò–≥—Ä–æ–≤–æ–π' if data['module_type'] == 'game_module' else 'üîß –£—Ç–∏–ª–∏—Ç–∞'}\n"
    text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['module_name']}\n"
    text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
    text += f"–ö–æ–º–∞–Ω–¥—ã: {', '.join(data['commands'])}\n"
    text += f"–¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {response_type}</blockquote>"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    confirm_btn = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_module")
    add_command_btn = InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="add_command")
    cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    keyboard.add(confirm_btn, add_command_btn)
    keyboard.add(cancel_btn)
    
    await ModuleCreation.waiting_for_confirmation.set()
    await message.reply(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query_handler(lambda c: c.data == "confirm_module", state=ModuleCreation.waiting_for_confirmation)
async def confirm_module_creation(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    module_name = data['module_name']
    description = data['description']
    module_type = data['module_type']
    commands = ','.join(data['commands'])
    response_type = data.get('response_type', 'text')
    response_data = data.get('text', '')
    
    if response_type == 'photo':
        response_data = f"{data.get('photo', '')}|{data.get('text', '')}"
    elif response_type == 'buttons':
        response_data = str(data.get('buttons', []))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥—É–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
        INSERT OR REPLACE INTO user_modules 
        (module_name, module_type, description, commands, response_type, response_data) 
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (module_name, module_type, description, commands, response_type, response_data))
    conn.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    USER_MODULES[module_name] = description
    AVAILABLE_MODULES.update(USER_MODULES)
    
    await state.finish()
    
    text = "<b>‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
    text += "<blockquote>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–¥—É–ª–µ–π.</blockquote>"
    
    keyboard = InlineKeyboardMarkup()
    back_btn = InlineKeyboardButton("‚Ü©Ô∏è –ö –º–æ–¥—É–ª—è–º", callback_data="user_modules")
    keyboard.add(back_btn)
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query_handler(lambda c: c.data == "add_command", state=ModuleCreation.waiting_for_confirmation)
async def add_command(callback_query: types.CallbackQuery, state: FSMContext):
    text = "<b>‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
    text += "<blockquote>–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n(–Ω–∞–ø—Ä–∏–º–µ—Ä: !–∏–≥—Ä–∞2, /–∏–≥—Ä–∞2, –∏–≥—Ä–∞2):</blockquote>"
    
    keyboard = InlineKeyboardMarkup()
    cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_command")
    keyboard.add(cancel_btn)
    
    await ModuleCreation.waiting_for_commands.set()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query_handler(lambda c: c.data == "cancel_add_command", state=ModuleCreation.waiting_for_commands)
async def cancel_add_command(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    text = "<b>üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è</b>\n\n"
    text += f"<blockquote>–¢–∏–ø: {'üéÆ –ò–≥—Ä–æ–≤–æ–π' if data['module_type'] == 'game_module' else 'üîß –£—Ç–∏–ª–∏—Ç–∞'}\n"
    text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['module_name']}\n"
    text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
    text += f"–ö–æ–º–∞–Ω–¥—ã: {', '.join(data['commands'])}</blockquote>"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    confirm_btn = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_module")
    add_command_btn = InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="add_command")
    cancel_btn = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_creation")
    keyboard.add(confirm_btn, add_command_btn)
    keyboard.add(cancel_btn)
    
    await ModuleCreation.waiting_for_confirmation.set()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query_handler(lambda c: c.data.startswith("delete_"))
async def delete_selected_module(callback_query: types.CallbackQuery):
    if not check_permissions(callback_query.from_user.id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π!", show_alert=True)
        return
        
    module_name = callback_query.data.replace("delete_", "")
    
    if module_name in USER_MODULES:
        # –£–¥–∞–ª—è–µ–º –º–æ–¥—É–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('DELETE FROM user_modules WHERE module_name = ?', (module_name,))
        cursor.execute('DELETE FROM modules WHERE module_name = ?', (module_name,))
        conn.commit()
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        del USER_MODULES[module_name]
        if module_name in AVAILABLE_MODULES:
            del AVAILABLE_MODULES[module_name]
        
        text = "<b>‚úÖ –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!</b>\n\n"
        text += "<blockquote>–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—è –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã.</blockquote>"
        
        keyboard = InlineKeyboardMarkup()
        back_btn = InlineKeyboardButton("‚Ü©Ô∏è –ö –º–æ–¥—É–ª—è–º", callback_data="user_modules")
        keyboard.add(back_btn)
        
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else:
        await callback_query.answer("–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
cursor.execute('SELECT * FROM user_modules')
modules = cursor.fetchall()
for module in modules:
    USER_MODULES[module[0]] = module[2]
    AVAILABLE_MODULES.update(USER_MODULES)

@dp.message_handler()
async def handle_user_modules(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥—É–ª–∏
    cursor.execute('SELECT * FROM user_modules')
    modules = cursor.fetchall()
    
    for module in modules:
        module_name = module[0]
        commands = module[3].split(',')
        response_type = module[4]
        response_data = module[5]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–∞–Ω–¥–µ –º–æ–¥—É–ª—è
        if message.text.lower() in [cmd.strip().lower() for cmd in commands]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å
            if not await check_module(message, module_name):
                return
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if response_type == 'text':
                await message.reply(response_data, parse_mode=ParseMode.HTML)
            
            elif response_type == 'photo':
                photo_id, caption = response_data.split('|')
                await message.reply_photo(photo_id, caption=caption, parse_mode=ParseMode.HTML)
            
            elif response_type == 'buttons':
                keyboard = InlineKeyboardMarkup(row_width=2)
                buttons = eval(response_data)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                
                for button in buttons:
                    if 'url' in button:
                        btn = InlineKeyboardButton(button['text'], url=button['url'])
                    else:
                        btn = InlineKeyboardButton(button['text'], callback_data=f"custom_{module_name}_{button['text']}")
                    keyboard.add(btn)
                
                await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard, parse_mode=ParseMode.HTML)
            
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞

@dp.callback_query_handler(lambda c: c.data.startswith("custom_"))
async def handle_custom_button(callback_query: types.CallbackQuery):
    try:
        _, module_name, button_text = callback_query.data.split('_', 2)
        await callback_query.answer(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '{button_text}' –º–æ–¥—É–ª—è '{module_name}'")
    except Exception as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@dp.message_handler(Text(equals=['!—É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –Ω–∞—Ö—É–π']))
async def remove_all_admins(message: types.Message):
    if message.from_user.id not in raz_ids:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>\n<blockquote>—Ç—Ä–µ–±—É–µ—Ç—Å—è: —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</blockquote>", parse_mode=ParseMode.HTML)
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        cursor.execute("SELECT user_id FROM admin_users")
        admins = cursor.fetchall()
        
        if not admins:
            await message.reply("<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —É–∂–µ –ø—É—Å—Ç.</b>", parse_mode=ParseMode.HTML)
            return
            
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–¥–º–∏–Ω–æ–≤
        cursor.execute("DELETE FROM admin_users")
        conn.commit()
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –ø–∞–º—è—Ç–∏
        admin_ids.clear()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        for dev_id in raz_ids:
            if dev_id not in admin_ids:
                cursor.execute("INSERT OR IGNORE INTO admin_users (user_id) VALUES (?)", (dev_id,))
                admin_ids.append(dev_id)
        conn.commit()
        
        await message.reply("<b>‚úÖ –í—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!</b>\n<blockquote>–û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏.</blockquote>", parse_mode=ParseMode.HTML)
        
    except Exception as e:
        await message.reply(f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{e}</code>", parse_mode=ParseMode.HTML)

@dp.message_handler(Text(startswith=['–Ω–µ–≤–∏—è', '–ù–µ–≤–∏—è']))
async def nevia_ai(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        query = message.text.split(' ', 1)[1] if len(message.text.split(' ', 1)) > 1 else None
        
        if not query:
            await message.reply("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>–Ω–µ–≤–∏—è [–≤–∞—à –≤–æ–ø—Ä–æ—Å]</code>", parse_mode=ParseMode.HTML)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
        cursor.execute('''
            SELECT message, response FROM chat_history 
            WHERE user_id = ? 
            ORDER BY timestamp DESC LIMIT 5
        ''', (message.from_user.id,))
        
        history = cursor.fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        context = ""
        if history:
            for msg, resp in history:
                context += f"Human: {msg}\nAssistant: {resp}\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        prompt = f"{context}Human: {query}\nAssistant:"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        processing_msg = await message.reply("<b>ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...</b>", parse_mode=ParseMode.HTML)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º g4f –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            response = g4f.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                provider=g4f.Provider.DeepAi,
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            cursor.execute('''
                INSERT INTO chat_history (user_id, message, response) 
                VALUES (?, ?, ?)
            ''', (message.from_user.id, query, response))
            conn.commit()
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
            await processing_msg.edit_text(f"<b>ü§ñ –û—Ç–≤–µ—Ç:</b>\n\n<blockquote>{response}</blockquote>", parse_mode=ParseMode.HTML)
            
        except Exception as e:
            await processing_msg.edit_text(f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b> <code>{str(e)}</code>", parse_mode=ParseMode.HTML)
            
    except Exception as e:
        await message.reply(f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫ÔøΩÔøΩ:</b> <code>{str(e)}</code>", parse_mode=ParseMode.HTML)

@dp.message_handler(Text(equals=['.–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', '.clear']))
async def clear_chat_history(message: types.Message):
    if not check_permissions(message.from_user.id):
        await message.reply("<b>–£ –≤–∞—Å ÔøΩÔøΩ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—åÔøΩÔøΩ–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.</b>", parse_mode=ParseMode.HTML)
        return
        
    try:
        cursor.execute('DELETE FROM chat_history WHERE user_id = ?', (message.from_user.id,))
        conn.commit()
        await message.reply("<b>‚úÖ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!</b>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.reply(f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{str(e)}</code>", parse_mode=ParseMode.HTML)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
