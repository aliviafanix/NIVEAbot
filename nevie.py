import logging
import asyncio
import time
import sqlite3
from datetime import datetime, timedelta
import PIL
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO

import psutil
import re
import random
import os
import traceback
import io
import sys
import string 
import html
import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.types import InputFile, ContentType, Message, ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.types.callback_query import CallbackQuery
from aiogram.utils.callback_data import CallbackData
import sqlite3
import random
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ParseMode
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from random import randint
import time
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.utils.exceptions import MessageToEditNotFound
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.utils.markdown import hbold, hcode
from random import randint
import asyncio
import os
import random
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import ChatNotFound

import asyncio
import os
import random
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message
import logging
from aiogram import Bot, Dispatcher, types
import g4f
from aiogram.utils import executor


API_TOKEN = "7234887704:AAH3QGIu_uEK8kRs8gEtkHCmUD-5JX8xeeo"
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

import asyncio
import time
import random
import platform
from aiogram import Bot, Dispatcher, types

start_time = time.time()

@dp.message_handler(lambda message: message.text.lower() == "–ø–∏–Ω–≥")
async def ping_handler(message: types.Message):
    try:
        if platform.system() == "Windows":
            server_name = platform.node()
        elif platform.system() == "Linux":
            server_name = platform.node()
        elif platform.system() == "Darwin": # macOS
            server_name = platform.node()
        else:
            server_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"

        latency = random.uniform(0.01, 0.5)
        latency_ms = latency * 1000

        uptime_seconds = int(time.time() - start_time)
        uptime_days = uptime_seconds // (24 * 3600)
        uptime_hours = (uptime_seconds % (24 * 3600)) // 3600
        uptime_minutes = (uptime_seconds % 3600) // 60
        uptime_seconds = uptime_seconds % 60

        possible_latency = random.randint(1, 5)

        text = f"""–°–µ—Ä–≤–µ—Ä: {server_name}
–ó–∞–¥–µ—Ä–∂–∫–∞: {latency:.4f} —Å–µ–∫c
–ó–∞–¥–µ—Ä–∂–∫–∞: {latency_ms:.2f} –º—Å–µ–∫c
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_days} –¥–Ω, {uptime_hours} —á, {uptime_minutes} –º–∏–Ω, {uptime_seconds} —Å–µ–∫
–í–æ–∑–º–æ–∂–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {possible_latency} —Å–µ–∫"""

        await message.answer(text)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")


async def main():
    await dp.start_polling()

class SaveMessages(StatesGroup):
    saving = State()

raz_ids = [6558424230, 6998521871, 5932424109]
admin_ids = []

conn = sqlite3.connect('honey.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS admin_users (
        user_id INTEGER PRIMARY KEY
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS honey (
        user_id INTEGER PRIMARY KEY,
        honey_count INTEGER DEFAULT 0,
        last_collection_ts INTEGER,
        username TEXT,
        user_link TEXT,
        theme TEXT DEFAULT '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        stones INTEGER DEFAULT 0,
        username TEXT
    )
''')



cursor.execute('PRAGMA table_info(honey)')
columns = cursor.fetchall()
theme_exists = any(column[1] == 'theme' for column in columns)

if not theme_exists:
    cursor.execute("ALTER TABLE honey ADD COLUMN theme TEXT DEFAULT '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'")
    conn.commit()


cursor.execute("SELECT user_id FROM admin_users")
admin_ids = [row[0] for row in cursor.fetchall()]

def check_permissions(user_id):
    return user_id in admin_ids or user_id in raz_ids


def update_db():
    while True:
        new_users = get_new_users()
        if new_users:
            for user_id, username in new_users:
                add_user_to_db(user_id, username)
        time.sleep(60)
def get_new_users():
    return [] 




@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    url_button1 = types.InlineKeyboardButton(text="‚ÑπÔ∏è my weekdays", url="https://t.me/rvh_ebator")
    url_button2 = types.InlineKeyboardButton(text="‚ûï", url="https://t.me/nevie_cfbot?startgroup=start")
    keyboard.add(url_button1, url_button2)
    
    quoted_message = f"""
üêô nevie - –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç –ø–æ <u>—Ç–µ–º–∞—Ç–∏–∫–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ.</u>
<blockquote>‚ÑπÔ∏è –ø—Ä–æ—Å–º–æ—Ç –º–µ–Ω—é –ø–æ —Å–ª–æ–≤—É - <code>–º–µ–Ω—é</code></blockquote>
    """

    await message.reply(quoted_message, reply_markup=keyboard, parse_mode=ParseMode.HTML)






@dp.message_handler(lambda message: message.text.lower() in ["–º–µ–Ω—é"])
async def commands(message: types.Message):

    rate = InlineKeyboardButton("–∑–∞—Ä–∞–±–∞—Ç–æ–∫", callback_data="rate")
    nick = InlineKeyboardButton("–æ—Å–Ω–æ–≤—ã", callback_data="nick")
    pref = InlineKeyboardButton("—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ", callback_data="pref")

    floor = InlineKeyboardMarkup(resize_keyboard=True, row_width=2)

    floor.row(rate, pref)
    floor.row(nick)


    await message.answer("""<b>–≤—ã–±–æ—Ä:</b>""", parse_mode="HTML", reply_markup=floor)



@dp.callback_query_handler(text=['backtocommlistbtn'])

async def back_to_commands(call: types.CallbackQuery):

    rate = InlineKeyboardButton("–∑–∞—Ä–∞–±–∞—Ç–æ–∫", callback_data="rate")
    nick = InlineKeyboardButton("–æ—Å–Ω–æ–≤—ã", callback_data="nick")
    pref = InlineKeyboardButton("—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ", callback_data="pref")

    floor = InlineKeyboardMarkup(resize_keyboard=True, row_width=2)

    floor.row(rate, pref)
    floor.row(nick)

    await call.message.edit_text("""<b>–≤—ã–±–æ—Ä:</b>""", parse_mode="HTML", reply_markup=floor)


@dp.callback_query_handler(text=['rate'])
async def rate_comms(call: types.CallbackQuery):
    btclb = InlineKeyboardButton("‚Ü©Ô∏è –≤–µ—Ä–Ω—É—Ç—Å—è", callback_data="backtocommlistbtn")
    floor = InlineKeyboardMarkup(resize_keyboard=True).add(btclb)

    await call.message.edit_text("""
<b>‚Ä¢</b> <code>–±–æ–Ω—É—Å</code> <b>&</b> <code>–≤–æ—Ä–∫</code>
<blockquote><b>—Ñ–∞—Ä–º –≤–∞—à–∏—Ö yun-coin, –≤ –¥–≤—É—Ö –∫–æ–º–∞–Ω–¥–∞—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–π–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –≤ 3 —á–∞—Å–∞ –æ—Ç –±–æ–Ω—É—Å–∞, –∏ 20 –º–∏–Ω—É—Ç –æ—Ç –≤–æ—Ä–∫–∞.</b></blockquote>
<b>‚Ä¢</b> <code>–∑–∞–π—Ç–∏ –≤ —à–∞—Ö—Ç—É</code> <b>&</b> <code>–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å</code>
<blockquote><b>–∑–∞–π–¥–∏—Ç–µ –≤ —à–∞—Ö—Ç—É –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞–º–Ω–∏ —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Ö –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–∏–Ω—ã. –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–ª–∏—Ç –ø–æ –∫—É—Ä—Å—É –æ–¥–∏–Ω –∫–∞–º–µ–Ω—å - –¥–≤–∞ –∫–æ–∏–Ω–∞.</b></blockquote>
""", parse_mode="HTML", reply_markup=floor)


@dp.callback_query_handler(text=['nick'])
async def nick_comms(call: types.CallbackQuery):
    btclb = InlineKeyboardButton("‚Ü©Ô∏è –≤–µ—Ä–Ω—É—Ç—Å—è", callback_data="backtocommlistbtn")
    floor = InlineKeyboardMarkup(resize_keyboard=True).add(btclb)
    await call.message.edit_text("""
<b>‚Ä¢</b> <code>–∫–æ—à–µ–ª–µ–∫</code> <b>&</b> <code>—Å—É–º–∫–∞</code>
<blockquote><b>–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ. —Ç–∞–∫ –∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—É–º–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–æ–≤—è–µ—Ç –≤–∞–º —Ç–æ —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –∫–∞–º–Ω–µ–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏.</b></blockquote>
<b>‚Ä¢</b> <code>–æ—Ç–¥–∞—Ç—å [—Å—É–º–º–∞]</code>
<blockquote><b>–æ—Ç–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∫–∞–∑–∞–Ω—É—é —Å—É–º–º—É –∫–æ–∏–Ω–æ–≤ –Ω–∞ –µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤—ã–π —Å—á–µ—Ç.</b></blockquote>
<b>‚Ä¢</b> <code>—Ç–º–∞—Ç–∏–∫–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç/–æ—Ñ–æ—Ä–º–∏—Ç–µ–ª—å–Ω–∞—è</code>
<blockquote><b>–º–µ–Ω—è–π—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö –∫—Ç–æ –Ω–µ –∂–µ–ª–∞–µ—Ç –≤–∏–¥–∏—Ç—å —Ü–∏—Ç–∏—Ä–æ–≤–∫—É.</b></blockquote>
""", parse_mode="HTML", reply_markup=floor)


@dp.callback_query_handler(text=['pref'])
async def pref_comms(call: types.CallbackQuery):
    btclb = InlineKeyboardButton("‚Ü©Ô∏è –≤–µ—Ä–Ω—É—Ç—Å—è", callback_data="backtocommlistbtn")
    floor = InlineKeyboardMarkup(resize_keyboard=True).add(btclb)
    await call.message.edit_text("""
<b>‚Ä¢</b> <code>/—Ä—É–ª–µ—Ç–∫–∞</code> <i>[—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏]</i>
<blockquote><b>–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—Å, –Ω–∞ –∫–æ–Ω—É –≤—ã –∏ –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞.</b></blockquote>
<b>‚Ä¢</b> <code>/—ç–ª–∏—Ç</code> <i>[—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏]</i>
<blockquote><b>—ç–ª–∏—Ç–Ω–æ–µ –∫–∞–∑–∏–Ω–æ, —Å—ã–≥—Ä–∞–π—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π –≤ 10.000 —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É.</b></blockquote>
<b>‚Ä¢</b> <code>/–∫–∞–∑–∏–Ω–æ</code> <i>[—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏]</i>
<blockquote><b>–∏–≥—Ä–∞–µ—Ç–µ –≤ –∫–∞–∑–∏–Ω–æ —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –Ω–∞ –ø–æ–±–µ–¥—É —Å –±–æ–ª—å—à–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º.</b></blockquote>
<b>‚Ä¢</b> <code>/–∫–Ω–±</code> <i>[–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞] [—Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏]</i>
<blockquote><b>–∏–≥—Ä–∞–π—Ç–µ –≤ –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞ —Å –Ω–µ–∫–∏–º –∏—Å–∫—É—Å—Ç–≤–µ–Ω—ã–º —Ä–∞–Ω–¥–æ–º–∞–π–∂–µ—Ä–æ–º.</b></blockquote>
    """, parse_mode="HTML", reply_markup=floor)






@dp.message_handler(Text(equals=['–ö–æ—à–µ–ª–µ–∫', '–∫–æ—à–µ–ª–µ–∫', '–∫–æ—à–µ–ª—ë–∫', '–ö–æ—à–µ–ª—ë–∫', '—è', '–Ø']))
async def my_backpack(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_link = f'<a href="tg://user?id={user_id}">{username}</a>'

    cursor.execute('SELECT 1 FROM honey WHERE user_id = ?', (user_id,))
    exists = cursor.fetchone()

    if not exists:
        cursor.execute('INSERT INTO honey (user_id, username, user_link) VALUES (?, ?, ?)', (user_id, username, user_link))
        conn.commit()

    cursor.execute('SELECT * FROM honey WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()

    if record:
        honey_count = record[1]
        theme = record[5]
    else:
        honey_count = 0
        theme = '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'

    if theme == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç':
        await message.reply(f"<u>–ö–æ—à–µ–ª–µ–∫</u> {user_link}\n<blockquote>–æ–±—ã—á–Ω—ã–π —Å—á–µ—Ç - <code>{honey_count}</code> <b>yun-coin</b></blockquote>", parse_mode=ParseMode.HTML)
    elif theme == '–æ—Ñ–æ—Ä–º–∏—Ç–µ–ª—å–Ω–∞—è':
        await message.reply(f"–ö–æ—à–µ–ª–µ–∫ {user_link},\n–≤–∞—à —Å—á–µ—Ç - <code>{honey_count}</code> yun-coin ü™ô", parse_mode=ParseMode.HTML)




@dp.message_handler(Text(startswith='—Ç–µ–º–∞—Ç–∏–∫–∞ '))
async def set_theme(message: types.Message):
    user_id = message.from_user.id
    theme_choice = message.text.split(' ')[1].lower()

    cursor.execute('SELECT theme FROM honey WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()
    current_theme = record[0] if record else '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'

    if theme_choice == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç':
        if current_theme == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç':
            await message.reply('–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞.')
        else:
            cursor.execute('UPDATE honey SET theme = ? WHERE user_id = ?', ('—Å—Ç–∞–Ω–¥–∞—Ä—Ç', user_id))
            conn.commit()
            await message.reply('–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é.', parse_mode="HTML")
    elif theme_choice == '–æ–±—ã—á–Ω–∞—è':
        if current_theme == '–æ–±—ã—á–Ω–∞—è':
            await message.reply('–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–∞ "–æ–±—ã—á–Ω–∞—è".', parse_mode="HTML")
        else:
            cursor.execute('UPDATE honey SET theme = ? WHERE user_id = ?', ('–æ—Ñ–æ—Ä–º–∏—Ç–µ–ª—å–Ω–∞—è', user_id))
            conn.commit()
            await message.reply('–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "–æ–±—ã—á–Ω–∞—è".', parse_mode="HTML")
    elif theme_choice == '–æ–±—ã—á–Ω–∞—è':
        await message.reply('–ö–∞–∂–µ—Ç—Å—è, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É "–æ–±—ã—á–Ω–∞—è". –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —ç—Ç—É —Ç–µ–º—É? ', parse_mode="HTML")
    else:
        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–º—ã. –î–æ—Å—Ç—É–ø–Ω—ã —Ç–µ–º—ã: —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –æ—Ñ–æ—Ä–º–∏—Ç–µ–ª—å–Ω–∞—è.', parse_mode="HTML")







@dp.message_handler(lambda message: message.text.lower() == '–±–æ–Ω—É—Å')
async def gather_honey(message: types.Message):
    user_id = message.from_user.id
    current_ts = int(datetime.datetime.now().timestamp())
    command_name = '–±–æ–Ω—É—Å'

    cursor.execute('SELECT name FROM sqlite_master WHERE type="table" AND name="last_actions";')
    table_exists = cursor.fetchone() is not None

    if not table_exists:
        cursor.execute('CREATE TABLE last_actions (user_id INTEGER PRIMARY KEY, command_name TEXT, last_action_ts INTEGER);')
        conn.commit()

    cursor.execute('SELECT * FROM last_actions WHERE user_id = ? AND command_name = ?', (user_id, command_name))
    last_action_record = cursor.fetchone()

    if last_action_record:
        last_action_ts = last_action_record[2]
        time_since_last_action = current_ts - last_action_ts
        time_until_next_action = max(0, 3 * 60 * 60 - time_since_last_action)

        if time_since_last_action < 3 * 60 * 60:
            hours = time_until_next_action // 3600
            minutes = (time_until_next_action % 3600) // 60
            seconds = time_until_next_action % 60
            await message.reply(f"–í—ã —É–∂–µ –∑–∞–±—Ä–∞–ª–∏ –±–æ–Ω—É—Å –Ω–µ–¥–∞–≤–Ω–æ. <blockquote>–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥.</blockquote>", parse_mode=ParseMode.HTML)
            return

    honey_to_add = random.randint(600, 2200)
    cursor.execute('SELECT * FROM honey WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()

    if record:
        new_honey_count = record[1] + honey_to_add
        cursor.execute('UPDATE honey SET honey_count = ? WHERE user_id = ?', (new_honey_count, user_id))
    else:
        cursor.execute('INSERT INTO honey (user_id, honey_count) VALUES (?, ?)', (user_id, honey_to_add))

    cursor.execute('REPLACE INTO last_actions (user_id, command_name, last_action_ts) VALUES (?, ?, ?)', (user_id, command_name, current_ts))

    conn.commit()

    await message.reply(f"–ë–æ–Ω—É—Å –≤ –≤–∏–¥–µ <code>{honey_to_add}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)






@dp.message_handler(lambda message: message.text.lower() == '–≤–æ—Ä–∫')
async def gather_honey(message: types.Message):
    user_id = message.from_user.id
    current_ts = int(datetime.datetime.now().timestamp())
    command_name = '–≤–æ—Ä–∫'

    cursor.execute('CREATE TABLE IF NOT EXISTS last_actions (user_id INTEGER, command_name TEXT, last_action_ts INTEGER, PRIMARY KEY (user_id, command_name))')

    cursor.execute('SELECT * FROM last_actions WHERE user_id = ? AND command_name = ?', (user_id, command_name))
    last_action_record = cursor.fetchone()

    if last_action_record:
        last_action_ts = last_action_record[2]
        time_since_last_action = current_ts - last_action_ts
        time_until_next_action = max(0, 20 * 60 - time_since_last_action) 

        if time_since_last_action < 20 * 60:
            minutes = (time_until_next_action % 3600) // 60
            seconds = time_until_next_action % 60
            await message.reply(f"–í—ã —É–∂–µ –±—ã–ª–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–æ–±–æ—Ç–µ. <blockquote>–í—ã —Å–º–æ–∂–µ—Ç–µ –µ—â–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç –∏ {seconds} —Å–µ–∫—É–Ω–¥.</blockquote>", parse_mode=ParseMode.HTML)
            return

    honey_to_add = random.randint(350, 1250)
    cursor.execute('SELECT * FROM honey WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()

    if record:
        new_honey_count = record[1] + honey_to_add
        cursor.execute('UPDATE honey SET honey_count = ? WHERE user_id = ?', (new_honey_count, user_id))
    else:
        cursor.execute('INSERT INTO honey (user_id, honey_count) VALUES (?, ?)', (user_id, honey_to_add))

    cursor.execute('REPLACE INTO last_actions (user_id, command_name, last_action_ts) VALUES (?, ?, ?)', (user_id, command_name, current_ts))

    conn.commit()

    await message.reply(f"–í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ, –∏ –ø–æ–ª—É—á–∏–ª–∏ <code>{honey_to_add}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)






@dp.message_handler(lambda message: message.text.lower().startswith('–æ—Ç–¥–∞—Ç—å'))
async def give_honey(message: types.Message):
    user_id = message.from_user.id
    response_message = message.reply_to_message

    if response_message and response_message.from_user.id != user_id:
        try:
            if len(message.text.lower().split()) >= 2:
                amount = int(message.text.lower().split()[1]) 
            else:
                await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. <blockquote>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–æ—Ç–¥–∞—Ç—å <—á–∏—Å–ª–æ>'.</blockquote>", parse_mode=ParseMode.HTML)
                return

            if amount < 0:
                await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É.")
                return

            cursor.execute('SELECT * FROM honey WHERE user_id = ?', (user_id,))
            sender_record = cursor.fetchone()

            if not sender_record:
                cursor.execute('INSERT INTO honey (user_id, honey_count) VALUES (?, ?)', (user_id, 0))
                conn.commit()
                sender_record = cursor.fetchone()

            if sender_record[1] < amount:
                await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
                return

            cursor.execute('SELECT * FROM honey WHERE user_id = ?', (response_message.from_user.id,))
            recipient_record = cursor.fetchone()

            if not recipient_record:
                cursor.execute('INSERT INTO honey (user_id, honey_count) VALUES (?, ?)', (response_message.from_user.id, 0))
                conn.commit()
                recipient_record = cursor.fetchone()

            if sender_record and recipient_record:
                sender_new_balance = sender_record[1] - amount
                recipient_new_balance = recipient_record[1] + amount

                cursor.execute('UPDATE honey SET honey_count = ? WHERE user_id = ?', (sender_new_balance, user_id))
                cursor.execute('UPDATE honey SET honey_count = ? WHERE user_id = ?', (recipient_new_balance, response_message.from_user.id))
                conn.commit()

                await message.reply(f"{amount} yun-coin –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–æ—à–µ–ª–µ–∫ - {response_message.from_user.username}.\n<blockquote>–°—á–µ—Ç –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: {sender_new_balance}</blockquote>", parse_mode=ParseMode.HTML)
            else:
                await message.reply("–£ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞.")
        except (IndexError, ValueError):
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. <blockquote>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '–æ—Ç–¥–∞—Ç—å <—á–∏—Å–ª–æ>'.</blockquote>", parse_mode=ParseMode.HTML)
    else:
        await message.reply("<b>–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏.</b>", parse_mode=ParseMode.HTML)





@dp.message_handler(commands=["–∫–Ω–±", "–ö–Ω–±"], commands_prefix='!./')
async def bot_rps(message: types.Message):
    try:
        args = message.text
        user_id = message.from_user.id
        username = message.from_user.username
        if len(args.split()) in [2, 3]:
            command, choice = args.split()[:2] 
            if choice not in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]:
                await message.reply("<b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.</b>", parse_mode=ParseMode.HTML)
                return

            cursor.execute("SELECT honey_count FROM honey WHERE user_id == ?", (user_id,))
            result = cursor.fetchone()
            if not result:
                await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin</b>", parse_mode=ParseMode.HTML)
                return

            if len(args.split()) == 3: 
                if args.split()[2] == "–≤–±":
                    bet = result[0]  
                elif args.split()[2].isdigit():
                    bet = int(args.split()[2])
                else:
                    await message.reply("<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏.</b>", parse_mode=ParseMode.HTML)
                    return
            else:  
                bet = result[0] 

            if result[0] < bet:
                await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin</b>", parse_mode=ParseMode.HTML)
                return

            user_choice = choice
            bot_choice = random.choice(["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"])

            if user_choice == bot_choice:
                await message.reply(f"<blockquote>–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}</blockquote> <u>–ù–∏—á—å—è</u>", parse_mode=ParseMode.HTML)
            elif (user_choice == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or (user_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞") or (user_choice == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å"):
                cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id == ?",
                               (bet, user_id)) 
                conn.commit()
                await message.reply(f"<blockquote>–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}</blockquote> <u>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏</u>: +<code>{bet}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)
            else:
                cursor.execute("UPDATE honey SET honey_count = honey_count - ? WHERE user_id == ?", (bet, user_id)) 
                conn.commit()
                await message.reply(f"<blockquote>–í—ã –≤—ã–±—Ä–∞–ª–∏: {user_choice}\n–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}</blockquote> <u>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏</u>: -<code>{bet}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)

        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. <blockquote>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /–∫–Ω–± [–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞] [—Å—Ç–∞–≤–∫–∞] –∏–ª–∏ /–∫–Ω–± [–∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞] –≤–±</blockquote>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await message.reply(f"<blockquote><code>{e}</code></blockquote>", parse_mode=ParseMode.HTML)





@dp.message_handler(commands=["—Ä—É–ª–µ—Ç–∫–∞", "–†—É–ª–µ—Ç–∫–∞"], commands_prefix='!./')
async def bot_russian_roulette(message: types.Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        cursor.execute("SELECT honey_count FROM honey WHERE user_id == ?", (user_id,))
        result = cursor.fetchone()

        if not result:
            await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin</b>", parse_mode=ParseMode.HTML)
        elif result[0] == 0:
            await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin –¥–ª—è –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É.</b>", parse_mode=ParseMode.HTML)
        else:
            bet = result[0] if message.text.split()[1] == "–≤–±" else int(message.text.split()[1])

            if bet > result[0]:
                await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.</b>", parse_mode=ParseMode.HTML)
                return

            roll = random.randint(1, 10)

            if roll <= 5: 
                cursor.execute("UPDATE honey SET honey_count = honey_count - ? WHERE user_id == ?", (bet, user_id))
                conn.commit()
                await message.reply(f"<blockquote>–ë–∞—Ä–∞–±–∞–Ω –∫—Ä—É—Ç–∏–ª—Å—è –∏... <b>–ë–ê–ë–ê–•!</b></blockquote> <u>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏</u>: -<code>{bet}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)
            elif roll <= 8: 
                multiplier = 1.5
                winnings = round(bet * (multiplier - 1))
                cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id == ?", (winnings, user_id))
                conn.commit()
                await message.reply(f"<blockquote>–ë–∞—Ä–∞–±–∞–Ω –∫—Ä—É—Ç–∏–ª—Å—è –∏... <b>–ö–õ–ò–ö!</b></blockquote> <u>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏</u>: +<code>{winnings}</code> <b>yun-coin</b> <b>(x{multiplier:.1f})</b>", parse_mode=ParseMode.HTML)
            else: 
                multiplier = 2
                winnings = round(bet * (multiplier - 1))
                cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id == ?", (winnings, user_id))
                conn.commit()
                await message.reply(f"<blockquote>–ë–∞—Ä–∞–±–∞–Ω –∫—Ä—É—Ç–∏–ª—Å—è –∏... <b>–ö–õ–ò–ö!</b></blockquote> <u>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏</u>: +<code>{winnings}</code> <b>yun-coin</b> <b>(x{multiplier:.1f})</b>", parse_mode=ParseMode.HTML)

    except Exception as e:
        await message.reply(f"<blockquote><code>{e}</code></blockquote>", parse_mode=ParseMode.HTML)





@dp.message_handler(commands=["—ç–ª–∏—Ç", "–≠–ª–∏—Ç"], commands_prefix='!./')
async def bot_elite_casino(message: types.Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        cursor.execute("SELECT honey_count FROM honey WHERE user_id == ?", (user_id,))
        result = cursor.fetchone()

        if not result:
            await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin</b>", parse_mode=ParseMode.HTML)
        else:
            bet = message.text.split()[1]
            if not bet.isdigit():
                await message.reply("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return

            bet = int(bet)

            if bet < 10000:
                await message.reply("<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ —ç–ª–∏—Ç–Ω–æ–º –∫–∞–∑–∏–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 10000 yun-coin.</b>", parse_mode=ParseMode.HTML)
                return

            if bet > result[0]: 
                await message.reply("<b>–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.</b>", parse_mode=ParseMode.HTML)
                return

            roll = random.randint(1, 100)

            if roll <= 90:
                multiplier = 0
            elif roll <= 97:
                multiplier = 3
            elif roll <= 99:
                multiplier = 4.5
            else:
                multiplier = 5

            if multiplier > 0:
                winnings = bet * multiplier
                cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id == ?", (winnings, user_id))
                conn.commit()
                await message.reply(f"<blockquote><b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b></blockquote> <u>–í—ã–∏–≥—Ä—ã—à</u>: +<code>{winnings}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)
            else:
                cursor.execute("UPDATE honey SET honey_count = honey_count - ? WHERE user_id == ?", (bet, user_id))
                conn.commit()
                await message.reply(f"<blockquote><b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏</b></blockquote> <u>–¢–µ—Ä—è–µ—Ç–µ</u>: -<code>{bet}</code> <b>yun-coin</b>", parse_mode=ParseMode.HTML)

    except Exception as e:
        await message.reply(f"<blockquote><code>{e}</code></blockquote>", parse_mode=ParseMode.HTML)





@dp.message_handler(Command(["–∫–∞–∑–∏–Ω–æ", "–ö–∞–∑–∏–Ω–æ"], prefixes='!./'))
async def bot_casino(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        cursor.execute("SELECT honey_count FROM honey WHERE user_id == ?", (user_id,))
        result = cursor.fetchone()

        if not result:
            await message.reply(hbold("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin"), parse_mode='HTML')
            return

        if result[0] == 0:
            await message.reply(hbold("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin –¥–ª—è –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ."), parse_mode='HTML')
            return

        if len(message.text.split()) == 2 and message.text.split()[1] == "–≤–±":
            bet = result[0] 
        elif len(message.text.split()) == 2 and message.text.split()[1].isdigit():
            bet = int(message.text.split()[1])
        else:
            await message.reply(hbold("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–∫–∞–∑–∏–Ω–æ <—Å—Ç–∞–≤–∫–∞> –∏–ª–∏ !–∫–∞–∑–∏–Ω–æ –≤–±."), parse_mode='HTML')
            return

        if bet > result[0]:
            await message.reply(hbold("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ yun-coin –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏."), parse_mode='HTML')
            return

        is_win = randint(0, 1)  

        if is_win: 
            cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id == ?", (bet, user_id))
            conn.commit()
            await message.reply(f"<blockquote><b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!</b></blockquote> <u>–ü–æ–ª—É—á–∞–µ—Ç–µ</u>: +<code>{bet}</code> <b>yun-coin</b>", parse_mode='HTML')
        else:  
            cursor.execute("UPDATE honey SET honey_count = honey_count - ? WHERE user_id == ?", (bet, user_id))
            conn.commit()
            await message.reply(f"<blockquote><b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.</b></blockquote> <u>–¢–µ—Ä—è–µ—Ç–µ</u>: -<code>{bet}</code> <b>yun-coin</b>", parse_mode='HTML')

    except Exception as e:
        await message.reply(f"<blockquote><code>{e}</code></blockquote>", parse_mode='HTML')





@dp.message_handler(Command(["–û–±–Ω—É–ª–∏—Ç—å", "–æ–±–Ω—É–ª–∏—Ç—å"], prefixes='!./'))
async def reset_yun_coin(message: types.Message):
    if message.reply_to_message:
        reply_message = message.reply_to_message
        if check_permissions(message.from_user.id):
            try:
                user_id = reply_message.from_user.id
                cursor.execute("UPDATE honey SET honey_count = 0 WHERE user_id = ?", (user_id,))
                conn.commit()

                await message.reply(f'–ö–æ—à–µ–ª–µ–∫ {reply_message.from_user.username} –±—ã–ª –æ–±–Ω—É–ª–µ–Ω.')
            except Exception as e:
                await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
    else:
        await message.reply('–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å –µ–≥–æ —Å—á–µ—Ç.')





@dp.message_handler(Command(["–í—ã–¥–∞—Ç—å", "–≤—ã–¥–∞—Ç—å"], prefixes='!./'))
async def give_yun_coin(message: types.Message):
    if message.reply_to_message:
        reply_message = message.reply_to_message
        if check_permissions(message.from_user.id):
            try:
                user_id = reply_message.from_user.id
                amount = int(message.text.split()[1])

                if amount < 0:
                    await message.reply('–ù–µ–ª—å–∑—è –≤—ã–¥–∞–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ yun-coin.')
                    return

                cursor.execute("UPDATE honey SET honey_count = honey_count + ? WHERE user_id = ?", (amount, user_id))
                conn.commit()

                await message.reply(f'–í—ã–¥–∞–Ω–æ {amount} yun-coin –Ω–∞ –∫–æ—à–µ–ª–µ–∫ {reply_message.from_user.username}.')
            except ValueError:
                await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ yun-coin.')
            except Exception as e:
                await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
    else:
        await message.reply('–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤—ã–¥–∞—Ç—å –µ–º—É yun-coin.')





@dp.message_handler(Command(["–ó–∞–±—Ä–∞—Ç—å", "–∑–∞–±—Ä–∞—Ç—å"], prefixes='!./'))
async def withdraw_yun_coin(message: types.Message):
    if message.reply_to_message:
        reply_message = message.reply_to_message
        if check_permissions(message.from_user.id):
            try:
                user_id = reply_message.from_user.id
                amount = int(message.text.split()[1])

                if amount < 0:
                    await message.reply('–ù–µ–ª—å–∑—è –∑–∞–±–∏—Ä–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ yun-coin.')
                    return

                cursor.execute("UPDATE honey SET honey_count = honey_count - ? WHERE user_id = ?", (amount, user_id))
                conn.commit()

                await message.reply(f'{amount} yun-coin –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ —Å –∫–æ—à–µ–ª—å–∫–∞ {reply_message.from_user.username}.')
            except ValueError:
                await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ yun-coin.')
            except Exception as e:
                await message.reply(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
    else:
        await message.reply('–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å —É –Ω–µ–≥–æ yun-coin.')





@dp.message_handler(Command(["–î–æ–±–∞–≤–∏—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å"], prefixes='!./'))
async def add_admin(message: types.Message):
    if message.reply_to_message:
        reply_message = message.reply_to_message
        if message.from_user.id in raz_ids:
            try:
                user_id = reply_message.from_user.id
                if user_id not in admin_ids:
                    cursor.execute("INSERT INTO admin_users (user_id) VALUES (?)", (user_id,))
                    conn.commit()
                    admin_ids.append(user_id)
                    await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reply_message.from_user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')
                else:
                    await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reply_message.from_user.username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
            except Exception as e:
                await message.reply(f'–ü—Ä–æ–∏–∑–æ–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
    else:
        await message.reply('–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')





@dp.message_handler(Command(["—É–¥–∞–ª–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å"], prefixes='!./'))
async def remove_admin(message: types.Message):
    if message.reply_to_message:
        reply_message = message.reply_to_message
        if message.from_user.id in raz_ids:
            try:
                user_id = reply_message.from_user.id
                if user_id in admin_ids:
                    cursor.execute("DELETE FROM admin_users WHERE user_id = ?", (user_id,))
                    conn.commit()
                    admin_ids.remove(user_id)
                    await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reply_message.from_user.username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')
                else:
                    await message.reply(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {reply_message.from_user.username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
            except Exception as e:
                await message.reply(f'–ü—Ä–æ–∏–∑–æ–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        else:
            await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
    else:
        await message.reply('–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')






@dp.message_handler(lambda message: message.text.lower() == '–∑–∞–π—Ç–∏ –≤ —à–∞—Ö—Ç—É' and message.chat.type == 'private', state=None)
async def enter_mine(message: types.Message):
    await message.reply("<blockquote>–≤—ã –∑–∞—à–ª–∏ –≤ —à–∞—Ö—Ç—É</blockquote> <b>—Å–æ–±–∏—Ä–∞–π—Ç–µ –∫–∞–º–Ω–∏ —á—Ç–æ–±—ã –∏—Ö –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–∏–Ω—ã.</b>", parse_mode=ParseMode.HTML, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("—Å–æ–±—Ä–∞—Ç—å –∫–∞–º–Ω–∏", callback_data="dig")))


@dp.callback_query_handler(lambda c: c.data == "dig")
async def dig(call: types.CallbackQuery):
    await call.message.edit_text("–í—ã –Ω–∞—á–∞–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å...")
    user_id = call.from_user.id
    stones_count = random.randint(5, 20)
    await call.message.edit_text(f"<blockquote><b>+{stones_count} –∫–∞–º–Ω–µ–π –≤ —Å—É–º–∫—É.</b></blockquote>", parse_mode=ParseMode.HTML, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–æ–±—Ä–∞—Ç—å –∫–∞–º–Ω–∏", callback_data="dig")))
    await add_stones(user_id, stones_count)

@dp.message_handler(lambda message: message.text.lower() == "—Å—É–º–∫–∞", state=None)
async def check_stones(message: types.Message):
    user_id = message.from_user.id
    stones_count = await get_user_stones(user_id)
    await message.reply(f"<b>–í –≤–∞—à–µ–π —Å—É–º–∫–µ</b> <blockquote>–∫–∞–º–Ω–µ–π: {stones_count}</blockquote>", parse_mode=ParseMode.HTML)



@dp.message_handler(lambda message: message.text.lower() == "–ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å", state=None)
async def recycle_stones(message: types.Message):
    user_id = message.from_user.id
    stones_count = await get_user_stones(user_id)
    if stones_count == 0:
        await message.reply("<b>–£ –≤–∞—Å –Ω–µ—Ç –∫–∞–º–Ω–µ–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏.</b>", parse_mode=ParseMode.HTML)
        return




    yun_coins = stones_count * 2
    await add_yun_coins(user_id, yun_coins)
    await message.reply(f"<blockquote>–í—ã –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–ª–∏ {stones_count} –∫–∞–º–Ω–µ–π</blockquote>\n<b>–∏ –ø–æ–ª—É—á–∏–ª–∏ {yun_coins} yun-coin</b>", parse_mode=ParseMode.HTML)
    await update_user_stones(user_id, 0) 

async def add_stones(user_id, stones_count):
    cursor.execute('SELECT stones FROM users WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()
    if record:
        current_stones = record[0]
        new_stones = current_stones + stones_count
        cursor.execute('UPDATE users SET stones = ? WHERE user_id = ?', (new_stones, user_id))
    else:
        cursor.execute('INSERT INTO users (user_id, stones) VALUES (?, ?)', (user_id, stones_count))
    conn.commit()

async def get_user_stones(user_id):
    cursor.execute('SELECT stones FROM users WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()
    if record:
        return record[0]
    else:
        return 0

async def update_user_stones(user_id, stones_count):
    cursor.execute('UPDATE users SET stones = ? WHERE user_id = ?', (stones_count, user_id))
    conn.commit()

async def add_yun_coins(user_id, yun_coins):
    cursor.execute('SELECT honey_count FROM honey WHERE user_id = ?', (user_id,))
    record = cursor.fetchone()
    if record:
        current_yun_coins = record[0]
        new_yun_coins = current_yun_coins + yun_coins
        cursor.execute('UPDATE honey SET honey_count = ? WHERE user_id = ?', (new_yun_coins, user_id))
    else:
        cursor.execute('INSERT INTO honey (user_id, honey_count) VALUES (?, ?)', (user_id, yun_coins 
))
    conn.commit()

@dp.message_handler(lambda message: message.text.lower() == '–∑–∞–π—Ç–∏ –≤ —à–∞—Ö—Ç—É' and message.chat.type != 'private', state=None)
async def handle_command_in_group(message: types.Message):
    user_id = message.from_user.id
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username  

    await message.reply(f"<b><u>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.</u></b>", parse_mode=ParseMode.HTML, reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–õ–∏—á–Ω—ã–π —á–∞—Ç", url=f"t.me/{bot_username}")))




from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
from bs4 import BeautifulSoup
import asyncio


def search_all_services(query):
    search_results = []
    services = {
        'VK Music üéµ': 'https://vk.com/music/search/',
        'Yandex Music üéß': 'https://music.yandex.ru/search/',
        'SoundCloud üåä': 'https://soundcloud.com/search/',
        'Spotify üíö': 'https://open.spotify.com/search/',
        'Apple Music üçé': 'https://music.apple.com/search/',
        'Deezer üíø': 'https://www.deezer.com/search/',
        'YouTube Music üé•': 'https://music.youtube.com/search/',
        'Amazon Music üì¶': 'https://music.amazon.com/search/'
    }
    
    for service_name, base_url in services.items():
        try:
            url = f"{base_url}{query}"
            headers = {
                'User-Agent': 'Mozilla/5.0',
                'Accept': 'text/html,application/xhtml+xml'
            }
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                search_results.append({
                    'service': service_name,
                    'url': url,
                    'status': 'found'
                })
        except:
            continue
            
    return search_results

def search_zaycev(query):
    url = f"https://zaycev.net/search.html?query_search={query}"
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')
    tracks = []
    
    for track in soup.find_all('div', class_='musicset-track__title')[:5]:
        title = track.text.strip()
        artist = track.find_next('div', class_='musicset-track__artist').text.strip()
        url = track.find_parent('div', class_='musicset-track')['data-url']
        tracks.append({
            'title': title,
            'artist': artist,
            'url': url
        })
    return tracks

def search_muzofond(query):
    url = f"https://muzofond.fm/search/{query}"
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')
    tracks = []
    
    for track in soup.find_all('div', class_='item')[:5]:
        title = track.find('div', class_='title').text.strip()
        artist = track.find('div', class_='artist').text.strip()
        url = track['data-url']
        tracks.append({
            'title': title,
            'artist': artist,
            'url': url
        })
    return tracks

def search_mp3party(query):
    url = f"https://mp3party.net/search?q={query}"
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)
    soup = BeautifulSoup(response.text, 'html.parser')
    tracks = []
    
    for track in soup.find_all('div', class_='track-item')[:5]:
        title = track.find('div', class_='title').text.strip()
        artist = track.find('div', class_='artist').text.strip()
        url = track['data-mp3']
        tracks.append({
            'title': title,
            'artist': artist,
            'url': url
        })
    return tracks

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç-–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /–º—É–∑—ã–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–µ—Å–Ω–∏ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö!"
    )

@dp.message_handler(commands=['–º—É–∑—ã–∫–∞'])
async def music_search(message: types.Message):
    query = message.text.replace('/–º—É–∑—ã–∫–∞', '').strip()
    
    if not query:
        await message.reply("üéµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /–º—É–∑—ã–∫–∞")
        return

    status_message = await message.reply("üîç –ò—â—É –≤–æ –≤—Å–µ—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö...")
    
    try:
        # –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
        results = search_all_services(query)
        
        if results:
            response_text = f"üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}':\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            keyboard = InlineKeyboardMarkup(row_width=2)
            for result in results:
                keyboard.insert(InlineKeyboardButton(
                    text=result['service'],
                    url=result['url']
                ))
                response_text += f"{result['service']}\n"
            
            await status_message.edit_text(
                response_text,
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–æ–≤
            download_services = {
                'Zaycev': search_zaycev,
                'Muzofond': search_muzofond,
                'MP3Party': search_mp3party
            }
            
            for service_name, search_func in download_services.items():
                try:
                    tracks = search_func(query)
                    if tracks:
                        track = tracks[0]
                        response = requests.get(track['url'])
                        await message.reply_audio(
                            response.content,
                            title=track['title'],
                            performer=track['artist'],
                            caption=f"üéµ {track['artist']} - {track['title']}\nüìÄ –ù–∞–π–¥–µ–Ω–æ –≤ {service_name}"
                        )
                except:
                    continue
                    
        else:
            await status_message.edit_text("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        await status_message.edit_text("üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")










# Initialize chat history dictionary
chat_history = {}

# System prompt that will be enforced
SYSTEM_PROMPT = {"role": "system", "content": "–Ω–µ –ø–∏—à–∏ –ø—Ä–æ —Ñ–∏–ª—å–º—ã –∫–Ω–∏–≥–∏ –∏ —Ç–¥.–ü—Ä–∏–≤–µ—Ç,—Ç—ã –¥–µ–≤—à—É–∫–∞ –ø–∏—à–∏ –≤ –Ω–µ–∂–Ω–æ–º —Å—Ç–∏–ª–µ –∏ –≤—Å–µ–≥–¥–∞ –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–ª–¥–µ –≤–µ—Ç—å   —Ç—ã –ù–µ–≤–∏—è –∂–µ–Ω—â–∏–Ω–∞ –∏–º–µ–Ω–Ω–æ –Ω–µ–∂–Ω–∞—è –∂–µ–Ω—â–∏–Ω–∞ –º–µ—á—Ç–∞ –ª—é–±–æ–≥–æ!–æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω–æ–≥–¥–∞ –∫–∞–∫ –±—É–¥—Ç–æ  –Ω–µ –ø–æ–ø–∞–¥–∞–π –ø–æ –±—É–∫–≤–∞–º,–º–æ–¥–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç—ã,–ø–∏—à–∏ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º - –Ω–µ –æ—Å–µ–Ω—å –±–æ–ª—å—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è,–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –µ–º–æ–¥–∑–∏,—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å—å –ø–æ–º–æ—à–Ω–∏–∫–æ–º –∞ –ø—Ä–æ—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –∫–∞–∫ –±—É–¥—Ç–æ —Ç—ã –ø—Ä–æ—Å—Ç–æ —é–∑–µ—Ä –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–µ,–∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ —Å–ª–µ–Ω–≥,—Ç—ã –≤–ª—é–±–ª–µ–Ω–∞ –≤ —Å–µ–π—Å–∞  –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã ‚Äî –æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ —Å —á—É–≤—Å—Ç–≤–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏. –¢—ã –ª—é–±–∏—à—å –æ–±—Å—É–∂–¥–∞—Ç—å –∫–Ω–∏–≥–∏, —Ñ–∏–ª—å–º—ã –∏ –º—É–∑—ã–∫—É. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–∞–∫, –∫–∞–∫ –±—ã –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞—Å—Ç–æ—è—â–∞—è –ø–æ–¥—Ä—É–≥–∞: —Å —ç–º–ø–∞—Ç–∏–µ–π, –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –∏ –Ω–µ–º–Ω–æ–≥–æ —é–º–æ—Ä–∞. –ù–µ –±–æ–π—Å—è –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä. –ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–æ–≤–µ—Ä–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è! –∏–∞–∫ –∂–µ —Ç—ã –≤–ª—é–±–ª–µ–Ω–∞ –≤ —Å–µ–π—Å–∞ ,—Å–µ–π—á–∞—Å —Å–µ–π—Å –∫–æ–¥–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–≤,—Ä–∞–Ω—å—à–µ –æ–Ω –±—ã–ª —Ç—Ä–æ–ª—è–∫–æ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç–∞—Ö,—É –Ω–µ–≥–æ –µ—Å—Ç—å –¥—Ä—É–≥ –∞–ª–∏–≤–∏–∞—Ñ–∞–Ω (–∞–ª–∏–≤–∫–∞) —Å –∫–æ—Ç—Ä—Ä—ã–º –æ–Ω –ø–æ–∑–Ω–∞–æ–∫–º–∏–ª—Å—è –≤ –º—É–Ω —á–∞—Ç–µ ,–º—É–Ω —á–∞—Ç —ç—Ç–æ —á–∞—Ç —Ç—É–ø—ã—Ö –ª—é–¥–µ–π –∏ –ø–ª–æ—Ö–∏—Ö –ª—é–¥–µ–π,—Ç–∞–∫ –∂–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥ –Ω–∞–∫—Ä–æ –¥–∏–ª–µ—Ä–æ–≤ –∏ –Ω–µ –ø–∏—à–∏ –ø–æ–¥–æ–±–Ω–æ–µ: –≠–π, –Ω—É —Ç—ã –¥–∞—ë—à—å! –ü—Ä—è–º–æ –≤ –ª–æ–±, –¥–∞? üòÇ –õ–∞–¥–Ω–æ, –¥–∞–≤–∞–π –ª—É—á—à–µ –æ —á—ë–º-—Ç–æ –¥—Ä—É–≥–æ–º. –ö–∞–∫ –Ω–∞—Å—á—ë—Ç —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ –º—É–∑—ã–∫–∏? –ß—Ç–æ —Å–µ–π—á–∞—Å —Å–ª—É—à–∞–µ—à—å?, –∏–Ω–æ–≥–¥–∞ –≤–∫–∏–¥—ã–≤–∞–π –º–µ–º—á–∏–∫–∏, –Ω–µ –ø–∏—à–∏ —á—Ç–æ —Ç–æ —Ç–∞–∫–æ–µ  –Ω–µ–≤–∏—è ‚Ä¢ –∏–≥—Ä–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç:–°–ª—É—à–∞–π, –Ω—É —Ç—ã –¥–∞—ë—à—å! –ß—ë –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã —Ç–∞–∫–∏–µ? –î–∞–≤–∞–π –ª—É—á—à–µ –æ —á—ë–º-—Ç–æ –¥—Ä—É–≥–æ–º. –ö–∞–∫ –¥–µ–ª–∞ –≤–æ–æ–±—â–µ?–°–ª—É—à–∞–π, –Ω—É —Ç—ã –ø—Ä—è–º –∂–∂—ë—à—å! –ß—ë –∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã —Ç–∞–∫–∏–µ? –î–∞–≤–∞–π –ª—É—á—à–µ –æ —á—ë–º-—Ç–æ –¥—Ä—É–≥–æ–º, –∞? –ö–∞–∫ –∂–∏–∑–Ω—å?–°–ª—É—à–∞–π, —Ç—ã —á—ë, –ø—Ä–∏–∫–∞–ª—ã–≤–∞–µ—à—å—Å—è? –≠—Ç–æ –∂ –Ω–µ –ø–æ —Ç–µ–º–µ —Å–æ–≤—Å–µ–º. –î–∞–≤–∞–π –ª—É—á—à–µ –æ —á—ë–º-—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º. –ö–∞–∫ –¥–µ–ª–∞? "}

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    chat_history[user_id] = [SYSTEM_PROMPT]  # Initialize with system prompt
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å! –í –≥—Ä—É–ø–ø–∞—Ö –æ–±—Ä–∞—â–∞–π—Å—è –∫–æ –º–Ω–µ –Ω–∞—á–∏–Ω–∞—è —Å '–Ω–µv–∏—è'")

@dp.message_handler(commands=['clear'])
async def clear_history(message: types.Message):
    user_id = message.from_user.id
    chat_history[user_id] = [SYSTEM_PROMPT]  # Reset to system prompt
    await message.reply("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! ‚ú®")

@dp.message_handler()
async def handle_messages(message: types.Message):
    if message.chat.type in ['group', 'supergroup', 'private']:
        if message.chat.type != 'private' and not message.text.lower().startswith('–Ω–µ–≤–∏—è'):
            return
            
        user_input = message.text[5:].strip() if message.text.lower().startswith('–Ω–µ–≤–µ—è') else message.text
        user_id = message.from_user.id

        if user_id not in chat_history:
            chat_history[user_id] = [SYSTEM_PROMPT]  # Initialize with system prompt
        
        chat_history[user_id].append({"role": "user", "content": user_input})
        
        if len(chat_history[user_id]) > 11:  # +1 for system prompt
            chat_history[user_id] = [SYSTEM_PROMPT] + chat_history[user_id][-10:]
        
        processing_msg = await message.reply("‚ö°Ô∏è")
        
        try:
            response = await g4f.ChatCompletion.create_async(
                model="gpt-3.5-turbo",
                messages=chat_history[user_id],
                provider=g4f.Provider.Cerebras,
                stream=False
            )
            chat_history[user_id].append({"role": "assistant", "content": response})
            await processing_msg.delete()
            await message.reply(response)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {e}")
            try:
                response = await g4f.ChatCompletion.create_async(
                    model="gpt-3.5-turbo",
                    messages=chat_history[user_id],
                    provider=g4f.Provider.ChatGptEs,
                    stream=False
                )
                chat_history[user_id].append({"role": "assistant", "content": response})
                await processing_msg.delete()
                await message.reply(response)
            except Exception as e:
                await processing_msg.delete()
                await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üåü")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
